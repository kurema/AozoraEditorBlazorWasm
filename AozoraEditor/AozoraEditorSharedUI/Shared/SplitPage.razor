<div class="ContainerMain">
	<div class="@ClassMain">@Left</div>
	<div class="@ClassSub">@Right</div>
</div>

<style>
	.ContainerMain {
		display: grid;
		grid-template-rows: 1fr;
		grid-template-columns: 1fr 1fr;
		flex: 1 0 0;
	}

	.PanelHalfLeft {
		grid-row: 1/2;
		grid-column: 1/2;
		min-width: 0;
		min-height: 0;
	}

	.PanelHalfRight {
		grid-row: 1/2;
		grid-column: 2/3;
		min-width: 0;
		min-height: 0;
	}

	.PanelFull {
		grid-row: 1/2;
		grid-column: 1/3;
		min-width: 0;
		min-height: 0;
	}

	.PanelNone {
		display: none;
		min-width: 0;
		min-height: 0;
	}

</style>

@code {
	[Parameter]
	public RenderFragment? Left{ get; set; }
	[Parameter]
	public RenderFragment? Right { get; set; }

	string ClassMain { get; set; } = "PanelFull";
	string ClassSub { get; set; } = "PanelNone";


	DisplayModes _DisplayMode = DisplayModes.MainFull;
	public DisplayModes DisplayMode
	{
		get => _DisplayMode;
		set
		{
			if (_DisplayMode == value) return;
			switch (value)
			{
				case DisplayModes.MainFull:
					ClassMain = "PanelFull";
					ClassSub = "PanelNone";
					break;
				case DisplayModes.Separated:
					ClassMain = "PanelHalfLeft";
					ClassSub = "PanelHalfRight";
					break;
			}
			_DisplayMode = value;
			StateHasChanged();
		}
	}

	public void ToggleDisplayMode() => DisplayMode = DisplayMode switch
	{
		DisplayModes.MainFull => DisplayModes.Separated,
		DisplayModes.Separated => DisplayModes.MainFull,
		_ => DisplayModes.MainFull,
	};

	public enum DisplayModes
	{
		MainFull, Separated,
	}

}
