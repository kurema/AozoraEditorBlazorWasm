@using Aozora.GaijiChuki.Xsd

@*<input data-bind="SearchText" />*@

<div class="aozora_dictionary_radicals_container">
	<details>
		<summary>
			<h1 class="aozora_dictionary_radicals_header"><span class="aozora_dictionary_radicals_header_icon">@(TabControl.GetMaterialSymbolOutlined("expand_more"))</span><span class="aozora_dictionary_radicals_header_main">部首</span><span class="aozora_dictionary_radicals_header_sub">読み</span></h1>
		</summary>

		<div class="aozora_dictionary_radicals">
			@if (Aozora.GaijiChuki.Manager.Instance?.kanji?.page is not null)
			{
				char saisho = ' ';
				@foreach (var (item, rd, kana) in Aozora.GaijiChuki.Manager.Instance.kanji.page
						.SelectMany(a => a.radical.readings.reading.Select(b => (a, b, b.Normalize(System.Text.NormalizationForm.FormD)[0])))
						.DistinctBy(a => (a.a, a.Item3))
						.OrderBy(a => a.Item2))
				{
					char saishoNew = kana;//UFDにして濁点・半濁点を取り除く処理。
					if (saisho != saishoNew)
					{
						<div class="aozora_dictionary_radical_stroke">@saishoNew</div>
					}
					saisho = saishoNew;
					<button class="aozora_dictionary_radical" title="@(string.Join('\n',item.radical.readings.reading))">
						@foreach (var item2 in item.radical.characters.character)
						{
							<div class="aozora_dictionary_radical_character" @onclick="_=>SelectPage(item)">@item2</div>
						}
					</button>
				}
			}
		</div>
	</details>

	<details>
		<summary>
			<h1 class="aozora_dictionary_radicals_header"><span class="aozora_dictionary_radicals_header_icon">@(TabControl.GetMaterialSymbolOutlined("expand_more"))</span><span class="aozora_dictionary_radicals_header_main">部首</span><span class="aozora_dictionary_radicals_header_sub">画数</span></h1>
		</summary>

		<div class="aozora_dictionary_radicals">
			@if (Aozora.GaijiChuki.Manager.Instance?.kanji?.page is not null)
			{
				int stroke = 0;
				@foreach (var (item, strk) in Aozora.GaijiChuki.Manager.Instance.kanji.page
						.SelectMany(a => a.radical.characters.character.Select(b => (a, Aozora.GaijiChuki.Manager.Toc.GetStrokeCount(b))))
						.Distinct().Where(a => a.Item2 > 0)
						.OrderBy(a => a.Item2))
				{
					int strokeNew = strk;
					if (stroke != strokeNew)
					{
						<div class="aozora_dictionary_radical_stroke">@strokeNew</div>
					}
					stroke = strokeNew;
					<button class="aozora_dictionary_radical" @onclick="_=>SelectPage(item)">
						@foreach (var item2 in item.radical.characters.character)
						{
							<div class="aozora_dictionary_radical_character">@item2</div>
						}
					</button>
				}
			}
		</div>
	</details>
</div>

<hr />

@if (SearchResults.Count > 0)
{
	<h1>一覧</h1>

	@if (CurrentPage is not null)
	{
		<p>@(string.Join(string.Empty, CurrentPage.radical?.characters?.character ?? Array.Empty<string>())) (@(string.Join('・', CurrentPage.radical?.readings?.reading ?? Array.Empty<string>())))</p>
	}

	<div class="aozora_dictionary_result_container">
		@foreach (var item in SearchResults)
		{
			var chs = item.Characters.ToArray();
			@*var categories = item.UnicodeCategory.GetEnumerator();*@
			if (chs is null or { Length: 0 }) continue;
			<button class="aozora_dictionary_result">
				@foreach (var ch in chs)
				{
					string ch2 = ch;
					if (System.Globalization.CharUnicodeInfo.GetUnicodeCategory(ch2, 0) == System.Globalization.UnicodeCategory.PrivateUse) ch2 = "？";
					<div class="aozora_dictionary_result_character" onclick="document.getElementById('@(item.Guid)').scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'});">@ch2</div>
				}
			</button>
		}
	</div>

	<div class="aozora_dictionary_result_detail_container">
		@foreach (var item in SearchResults)
		{
			switch (item)
			{
				case Models.DictionaryResultEntryGaijiChuki itemGc:
					<div class="aozora_dictionary_result_detail_item" id="@(item.Guid)">
						<div class="aozora_dictionary_result_detail_item_character">
							@{
								var categories = item.UnicodeCategory.GetEnumerator();
								var chs = item.Characters.ToArray();
								chs = chs.Length == 0 ? new[] { "？" } : chs;
								foreach (var ch in chs)
								{
									if (categories.Current == System.Globalization.UnicodeCategory.PrivateUse)
									{
										<text>？</text>
									}
									else
									{
										<text>@ch</text>
									}
								}
							}
						</div>
						<div class="aozora_dictionary_result_detail_item_info_container">
							<div class="aozora_dictionary_result_detail_item_info_note_container">
								@switch (itemGc.Content.Item)
								{
									case entryCompatible78Inclusion i1:
										<div class="aozora_dictionary_result_detail_item_info_icon">78互換包摂：@(i1.@ref)</div>
										break;
									case entryDesignVariant i2:
										<div class="aozora_dictionary_result_detail_item_info_icon">デザイン差：@(i2.@ref)</div>
										break;
									case entryInclusionApplication i3:
										var t1 = i3.Item switch { string s => s, note n => n.full, _ => string.Empty };
										<div class="aozora_dictionary_result_detail_item_info_icon">包摂適用：@t1</div>
										break;
									case entryIntegrationApplication i4:
										var t2 = i4.Item switch { string s => s, note n => n.full, _ => string.Empty };
										<div class="aozora_dictionary_result_detail_item_info_icon">統合適用：@t2</div>
										break;
									case object:
										<div class="aozora_dictionary_result_detail_item_info_icon">入力可能</div>
										break;
								}
								@switch (itemGc.Content.supplement)
								{
									case entrySupplement.supplementCommon:
										<div class="aozora_dictionary_result_detail_item_info_icon">補助漢字と共通</div>
										break;
									case entrySupplement.supplementOnly:
										<div class="aozora_dictionary_result_detail_item_info_icon">補助のみ</div>
										break;
								}
								@foreach (var ucv in itemGc.Content.UCV ?? new entryUCV[0])
								{
									<div class="aozora_dictionary_result_detail_item_info_icon">UCV@(ucv.number)</div>
								}
								@if (!string.IsNullOrWhiteSpace(item.Note))
								{
									<div class="aozora_dictionary_result_detail_item_info_note">※［＃@(item.Note)］</div>
								}

								@*@if (itemGc.Content.duplicate)
				{
				<div class="aozora_dictionary_result_detail_item_info_icon">重複</div>
				}*@
							</div>
							<table>
								@if (item.Jisx0213Code != Models.DictionaryResultEntryGaijiChuki.Jisx0213CodeEmpty && item.Characters.Count() < 2)
								{
									<tr>
										<th>JIS X 0213</th>
										<td>@(Aozora.Helpers.YamlValues.Jisx0213NumberToFormated(item.Jisx0213Code))</td>
									</tr>
								}
								@if (item.Unicode.Any())
								{
									<tr>
										<th>Unicode</th>
										<td>@(string.Join(' ', item.Unicode))</td>
									</tr>
								}
								<tr>
									<th>画数</th>
									<td>
										@if (itemGc.Content.duplicate)
										{
											<span title="本来の部首ではありません。">★</span>
										}
										@(Aozora.GaijiChuki.Manager.Tools.GetStrokesText(itemGc.Content, CurrentPage))
									</td>
								</tr>
							</table>
						</div>
					</div>
					break;
				case Models.DictionaryResultSingleChar itemRs:
					break;
			}
		}
	</div>
}
<h1>注意</h1>
<ul>
	<li>このデータは「<a href="https://www.aozora.gr.jp/gaiji_chuki/" target="_blank">青空文庫・外字注記辞書【第八版】</a>」をベースにしています。</li>
	<li>変換の関係で多くの字形に誤りがあります。公式のドキュメントで確認してください。</li>
	<li>環境によっては表示されない文字があります。</li>
	<li>部首の字形が複数ある場合は画数が複数表示されることがあります。</li>
	<li>注記に文字コードが含まれている場合、字形は元データではなく注記情報に基づいた表記になります。</li>
	<li>文字コードは表示されている文字に対応しています。字形が誤りの場合は文字コードも誤っている場合があります。</li>
	<li>青空文庫外部で利用する場合、Shift_JISではなくUTF-8などを利用して外字の使用を避けることも可能です。互換性が低下する点には注意してください。</li>
</ul>

<style>
	.aozora_dictionary_result_detail_container {
	}

		.aozora_dictionary_result_detail_container > .aozora_dictionary_result_detail_item {
			border: solid 1px #888888;
			display: grid;
			grid-template-columns: auto 1fr;
			margin: 1px 0;
			gap: 4px;
		}

			.aozora_dictionary_result_detail_container > .aozora_dictionary_result_detail_item > .aozora_dictionary_result_detail_item_character {
				grid-column: 1/2;
				font-size: 300%;
			}

			.aozora_dictionary_result_detail_container > .aozora_dictionary_result_detail_item > .aozora_dictionary_result_detail_item_info_container {
				grid-column: 2/3;
			}

				.aozora_dictionary_result_detail_container > .aozora_dictionary_result_detail_item > .aozora_dictionary_result_detail_item_info_container > .aozora_dictionary_result_detail_item_info_note_container {
					display: flex;
					flex-wrap: wrap;
					align-items: stretch;
				}

					.aozora_dictionary_result_detail_container > .aozora_dictionary_result_detail_item > .aozora_dictionary_result_detail_item_info_container > .aozora_dictionary_result_detail_item_info_note_container > .aozora_dictionary_result_detail_item_info_note {
						display: inline-flex;
						align-items: center;
					}

					.aozora_dictionary_result_detail_container > .aozora_dictionary_result_detail_item > .aozora_dictionary_result_detail_item_info_container > .aozora_dictionary_result_detail_item_info_note_container > .aozora_dictionary_result_detail_item_info_icon {
						border-radius: 4px;
						background: var(--aozora-theme-text-color);
						color: var(--aozora-theme-background);
						display: inline-flex;
						margin-right: 3px;
						padding: 0 2px;
						align-items: center;
					}


	.aozora_dictionary_radicals_container {
	}

		.aozora_dictionary_radicals_container details {
		}

			.aozora_dictionary_radicals_container details summary {
				display: block;
			}

				.aozora_dictionary_radicals_container details summary > * > * {
					vertical-align: middle;
				}

				.aozora_dictionary_radicals_container details summary::-webkit-details-marker {
					display: none;
				}

				.aozora_dictionary_radicals_container details summary .aozora_dictionary_radicals_header_icon {
					transition: transform 0.4s;
					display: inline-flex;
					flex-direction: row;
					justify-content: center;
					align-items: center;
					width: 1em;
					margin-right: 5px;
				}

			.aozora_dictionary_radicals_container details[open] summary .aozora_dictionary_radicals_header_icon {
				transform: rotate(180deg);
			}


	.aozora_dictionary_radicals_header > .aozora_dictionary_radicals_header_main {
		background: var(--aozora-theme-text-color);
		color: var(--aozora-theme-background);
	}

	.aozora_dictionary_radicals_header > .aozora_dictionary_radicals_header_sub {
	}

	.aozora_dictionary_radicals {
		width: 100%;
		display: flex;
		line-break: auto;
		flex-wrap: wrap;
		gap: 1px;
		/*margin: 4px;*/
	}

		.aozora_dictionary_radicals > .aozora_dictionary_radical {
			border: 1px solid #888888;
			display: flex;
		}

			.aozora_dictionary_radicals > .aozora_dictionary_radical > .aozora_dictionary_radical_character, .aozora_dictionary_radicals > .aozora_dictionary_radical_stroke {
				width: calc(1em + 8px);
				height: calc(1em + 8px);
				display: flex;
				justify-content: center;
				align-content: center;
				vertical-align: middle;
				user-select: none;
				cursor: pointer;
			}

			.aozora_dictionary_radicals > .aozora_dictionary_radical > .aozora_dictionary_radical_character {
				margin-right: 3px;
			}

				.aozora_dictionary_radicals > .aozora_dictionary_radical > .aozora_dictionary_radical_character:last-child {
					margin-right: 0px;
				}

		.aozora_dictionary_radicals > .aozora_dictionary_radical_stroke {
			background: var(--aozora-theme-text-color);
			color: var(--aozora-theme-background);
			border: 1px solid transparent;
		}

	.aozora_dictionary_result_container {
		width: 100%;
		display: flex;
		line-break: auto;
		flex-wrap: wrap;
		gap: 1px;
		font-size: 200%;
		margin: 10px 0;
	}

		.aozora_dictionary_result_container > .aozora_dictionary_result {
			border: 1px solid #888888;
			display: flex;
		}

			.aozora_dictionary_result_container > .aozora_dictionary_result > .aozora_dictionary_result_character {
				width: calc(1em + 8px);
				height: calc(1em + 8px);
				margin-right: 3px;
				display: flex;
				justify-content: center;
				align-content: center;
				vertical-align: middle;
				user-select: none;
				cursor: pointer;
			}

				.aozora_dictionary_result_container > .aozora_dictionary_result > .aozora_dictionary_result_character:last-child {
					margin-right: 0px;
				}
</style>


@code {
	string SearchText { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(() => Aozora.GaijiChuki.Manager.LoadContent());
		await base.OnInitializedAsync();
	}

	List<Models.IDictionaryResultEntry> SearchResults { get; set; } = new();

	page? CurrentPage { get; set; }

	void SelectPage(page page)
	{
		if (page?.entries is null) return;
		CurrentPage = page;
		SearchResults.Clear();
		SearchResults.AddRange(page.entries.Select(a => new Models.DictionaryResultEntryGaijiChuki(a)));
		StateHasChanged();
	}
}
