<input data-bind="SearchText" />

<div class="aozora_dictionary_radicals_container">
	<details>
		<summary>
			<h1 class="aozora_dictionary_radicals_header"><span class="aozora_dictionary_radicals_header_icon">@(TabControl.GetMaterialSymbolOutlined("expand_more"))</span><span class="aozora_dictionary_radicals_header_main">部首</span><span class="aozora_dictionary_radicals_header_sub">読み</span></h1>
		</summary>

		<div class="aozora_dictionary_radicals">
			@if (Aozora.GaijiChuki.Manager.Instance?.kanji?.page is not null)
			{
				char saisho = ' ';
				@foreach (var (item, rd, kana) in Aozora.GaijiChuki.Manager.Instance.kanji.page
						.SelectMany(a => a.radical.readings.reading.Select(b => (a, b, b.Normalize(System.Text.NormalizationForm.FormD)[0])))
						.DistinctBy(a => (a.a, a.Item3))
						.OrderBy(a => a.Item2))
				{
					char saishoNew = kana;//UFDにして濁点・半濁点を取り除く処理。
					if (saisho != saishoNew)
					{
						<div class="aozora_dictionary_radical_stroke">@saishoNew</div>
					}
					saisho = saishoNew;
					<button class="aozora_dictionary_radical" title="@(string.Join('\n',item.radical.readings.reading))">
						@foreach (var item2 in item.radical.characters.character)
						{
							<div class="aozora_dictionary_radical_character" @onclick="_=>SelectPage(item)">@item2</div>
						}
					</button>
				}
			}
		</div>
	</details>

	<details>
		<summary>
			<h1 class="aozora_dictionary_radicals_header"><span class="aozora_dictionary_radicals_header_icon">@(TabControl.GetMaterialSymbolOutlined("expand_more"))</span><span class="aozora_dictionary_radicals_header_main">部首</span><span class="aozora_dictionary_radicals_header_sub">画数</span></h1>
		</summary>

		<div class="aozora_dictionary_radicals">
			@if (Aozora.GaijiChuki.Manager.Instance?.kanji?.page is not null)
			{
				int stroke = 0;
				@foreach (var (item, strk) in Aozora.GaijiChuki.Manager.Instance.kanji.page
						.SelectMany(a => a.radical.characters.character.Select(b => (a, Aozora.GaijiChuki.Manager.Toc.GetStrokeCount(b))))
						.Distinct().Where(a => a.Item2 > 0)
						.OrderBy(a => a.Item2))
				{
					int strokeNew = strk;
					if (stroke != strokeNew)
					{
						<div class="aozora_dictionary_radical_stroke">@strokeNew</div>
					}
					stroke = strokeNew;
					<button class="aozora_dictionary_radical" @onclick="_=>SelectPage(item)">
						@foreach (var item2 in item.radical.characters.character)
						{
							<div class="aozora_dictionary_radical_character">@item2</div>
						}
					</button>
				}
			}
		</div>
	</details>
</div>

@if (SearchResults.Count > 0)
{
	<div class="aozora_dictionary_result_container">
		@foreach (var item in SearchResults)
		{
			var chs = item.Characters.ToArray();
			if (chs is null or { Length: 0 }) continue;
			<button class="aozora_dictionary_result">
				@foreach (var ch in chs)
				{
					string ch2 = ch;
					if (System.Globalization.CharUnicodeInfo.GetUnicodeCategory(ch2, 0) == System.Globalization.UnicodeCategory.PrivateUse)
					{
						ch2 = "？";
					}
					<div class="aozora_dictionary_result_character">@ch2</div>
				}
			</button>
		}
	</div>
}

<style>
	.aozora_dictionary_radicals_container {
	}

		.aozora_dictionary_radicals_container details {
		}

			.aozora_dictionary_radicals_container details summary {
				display: block;
			}

				.aozora_dictionary_radicals_container details summary > * > * {
					vertical-align: middle;
				}

				.aozora_dictionary_radicals_container details summary::-webkit-details-marker {
					display: none;
				}

				.aozora_dictionary_radicals_container details summary .aozora_dictionary_radicals_header_icon {
					transition: transform 0.4s;
					display: inline-flex;
					flex-direction: row;
					justify-content: center;
					align-items: center;
					width: 1em;
					margin-right: 5px;
				}

			.aozora_dictionary_radicals_container details[open] summary .aozora_dictionary_radicals_header_icon {
				transform: rotate(180deg);
			}


	.aozora_dictionary_radicals_header > .aozora_dictionary_radicals_header_main {
		background: black;
		color: white;
	}

	.aozora_dictionary_radicals_header > .aozora_dictionary_radicals_header_sub {
	}

	.aozora_dictionary_radicals {
		width: 100%;
		display: flex;
		line-break: auto;
		flex-wrap: wrap;
		gap: 1px;
		/*margin: 4px;*/
	}

		.aozora_dictionary_radicals > .aozora_dictionary_radical {
			border: 1px solid #888888;
			display: flex;
		}

			.aozora_dictionary_radicals > .aozora_dictionary_radical > .aozora_dictionary_radical_character, .aozora_dictionary_radicals > .aozora_dictionary_radical_stroke {
				width: calc(1em + 8px);
				height: calc(1em + 8px);
				display: flex;
				justify-content: center;
				align-content: center;
				vertical-align: middle;
				user-select: none;
				cursor: pointer;
			}

			.aozora_dictionary_radicals > .aozora_dictionary_radical > .aozora_dictionary_radical_character {
				margin-right: 3px;
			}

				.aozora_dictionary_radicals > .aozora_dictionary_radical > .aozora_dictionary_radical_character:last-child {
					margin-right: 0px;
				}

		.aozora_dictionary_radicals > .aozora_dictionary_radical_stroke {
			background: black;
			color: white;
			border: 1px solid transparent;
		}

	.aozora_dictionary_result_container {
		width: 100%;
		display: flex;
		line-break: auto;
		flex-wrap: wrap;
		gap: 1px;
		font-size: 200%;
		margin: 10px 0;
	}

		.aozora_dictionary_result_container > .aozora_dictionary_result {
			border: 1px solid #888888;
			display: flex;
		}

			.aozora_dictionary_result_container > .aozora_dictionary_result > .aozora_dictionary_result_character {
				width: calc(1em + 8px);
				height: calc(1em + 8px);
				margin-right: 3px;
				display: flex;
				justify-content: center;
				align-content: center;
				vertical-align: middle;
				user-select: none;
				cursor: pointer;
			}

				.aozora_dictionary_result_container > .aozora_dictionary_result > .aozora_dictionary_result_character:last-child {
					margin-right: 0px;
				}
</style>


@code {
	string SearchText { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(() => Aozora.GaijiChuki.Manager.LoadContent());
		await base.OnInitializedAsync();
	}

	List<Models.IDictionaryResultEntry> SearchResults { get; set; } = new();

	void SelectPage(Aozora.GaijiChuki.Xsd.page page)
	{
		if (page?.entries is null) return;
		SearchResults.Clear();
		SearchResults.AddRange(page.entries.Select(a => new Models.DictionaryResultEntryGaijiChuki(a)));
		StateHasChanged();
	}
}
