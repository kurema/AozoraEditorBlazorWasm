@using Aozora.GaijiChuki.Xsd

<div class="aozora_dictionary_search_container">
	<div class="aozora_dictionary_search_border">
		<div class="aozora_dictionary_search_button">
			@*当初はボタンの予定だったがボタンである必要はない。*@
			@(TabControl.GetMaterialSymbolOutlined("search"))
		</div>
		<button class="aozora_dictionary_option_button" @onclick="_=>{SearchOptionVisible=!SearchOptionVisible;}">
			@GetSearchOptionTargetsTitle(SearchOptionTarget)
		</button>
		<input data-bind="SearchText" placeholder="漢字・文字コード・部首の読み" />
		<button class="aozora_dictionary_search_info_button" @onclick="_=>{SearchInfoVisible=!SearchInfoVisible;}">
			@(TabControl.GetMaterialSymbolOutlined("info"))
		</button>
		@if (SearchOptionVisible)
		{
			const string selectedClass = "aozora_dictionary_search_option_item_selected";
			<!-- aozora_dictionary_search_option_item_selected -->
			<div class="aozora_dictionary_search_option">
				@foreach (var item in new SearchOptionTargets[] { SearchOptionTargets.All, SearchOptionTargets.Kanji, SearchOptionTargets.Radical })
				{
					<button @onclick="_=>{SearchOptionTarget=item;}"
							class="aozora_dictionary_search_option_item @(SearchOptionTarget == item?selectedClass:string.Empty)">
						@(GetSearchOptionTargetsTitle(item))
					</button>
				}
			</div>
		}
		@if (SearchInfoVisible)
		{
			<div class="aozora_dictionary_search_info">
				<ul>
					<li>入力は複数可能です。</li>
					<li>
						Unicodeコードポイント・JIS 0213面句点番号でも検索可能です。
						<ul>
							<li>例：U+1234、1-2-3</li>
						</ul>
					</li>
					<li>読み仮名は部首のみ検索できます。</li>
					<li>画数の検索は不確実です。</li>
				</ul>
			</div>
		}
	</div>
</div>

<div class="aozora_dictionary_radicals_container">
	<details>
		<summary>
			<h1 class="aozora_dictionary_radicals_header"><span class="aozora_dictionary_radicals_header_icon">@(TabControl.GetMaterialSymbolOutlined("expand_more"))</span><span class="aozora_dictionary_radicals_header_main">部首</span><span class="aozora_dictionary_radicals_header_sub">読み</span></h1>
		</summary>

		<div class="aozora_dictionary_radicals">
			@if (Aozora.GaijiChuki.Manager.Instance?.kanji?.page is not null)
			{
				char saisho = ' ';
				@foreach (var (item, rd, kana) in Aozora.GaijiChuki.Manager.Instance.kanji.page
						.SelectMany(a => a.radical.readings.reading.Select(b => (a, b, b.Normalize(System.Text.NormalizationForm.FormD)[0])))
						.DistinctBy(a => (a.a, a.Item3))
						.OrderBy(a => a.Item2))
				{
					char saishoNew = kana;//UFDにして濁点・半濁点を取り除く処理。
					if (saisho != saishoNew)
					{
						<div class="aozora_dictionary_radical_stroke">@saishoNew</div>
					}
					saisho = saishoNew;
					<button class="aozora_dictionary_radical" title="@(string.Join('\n',item.radical.readings.reading))">
						@foreach (var item2 in item.radical.characters.character)
						{
							<div class="aozora_dictionary_radical_character" @onclick="_=>SelectPage(item)">@item2</div>
						}
					</button>
				}
			}
		</div>
	</details>

	<details>
		<summary>
			<h1 class="aozora_dictionary_radicals_header"><span class="aozora_dictionary_radicals_header_icon">@(TabControl.GetMaterialSymbolOutlined("expand_more"))</span><span class="aozora_dictionary_radicals_header_main">部首</span><span class="aozora_dictionary_radicals_header_sub">画数</span></h1>
		</summary>

		<div class="aozora_dictionary_radicals">
			@if (Aozora.GaijiChuki.Manager.Instance?.kanji?.page is not null)
			{
				int stroke = 0;
				@foreach (var (item, strk) in Aozora.GaijiChuki.Manager.Instance.kanji.page
						.SelectMany(a => a.radical.characters.character.Select(b => (a, Aozora.GaijiChuki.Manager.Toc.GetStrokeCount(b))))
						.Distinct().Where(a => a.Item2 > 0)
						.OrderBy(a => a.Item2))
				{
					int strokeNew = strk;
					if (stroke != strokeNew)
					{
						<div class="aozora_dictionary_radical_stroke">@strokeNew</div>
					}
					stroke = strokeNew;
					<button class="aozora_dictionary_radical" @onclick="_=>SelectPage(item)">
						@foreach (var item2 in item.radical.characters.character)
						{
							<div class="aozora_dictionary_radical_character">@item2</div>
						}
					</button>
				}
			}
		</div>
	</details>

	<details>
		<!-- その他はradical(部首)ではないが、まぁええやろ。 -->
		<summary>
			<h1><span class="aozora_dictionary_radicals_header_icon">@(TabControl.GetMaterialSymbolOutlined("expand_more"))</span>その他</h1>
		</summary>
		<div class="aozora_dictionary_others">
			@if (Aozora.GaijiChuki.Manager.Instance?.other?.PageOther is not null)
			{
				foreach (var item in Aozora.GaijiChuki.Manager.Instance.other.PageOther.Where(a => a.entries.Length > 0))
				{
					<button class="aozora_dictionary_others_other" @onclick="_=>SelectPageOther(item)">
						@item.header
					</button>
				}
			}
		</div>
	</details>
</div>

<hr />

@if (SearchResults.Any())
{
	<h1>一覧</h1>

	@foreach (var c in SearchResults)
	{
		switch (c)
		{
			case Models.DictionaryResultGroupRadical cr:
				<p>@(string.Join(string.Empty, cr.Page.radical?.characters?.character ?? Array.Empty<string>())) (@(string.Join('・', cr.Page.radical?.readings?.reading ?? Array.Empty<string>())))</p>
				break;
		}
	}

	<div class="aozora_dictionary_result_container">
		@foreach (var itemG in SearchResults)
		{
			if (SearchResults.Count() > 1)
			{
				switch (itemG)
				{
					case Models.DictionaryResultGroupRadical rgr:
						<div class="aozora_dictionary_result_header">
							@foreach (var pchar in rgr.Page?.radical?.characters?.character ?? new string[0])
							{
								<div class="aozora_dictionary_result_header_character">@pchar</div>
							}
						</div>
						break;
				}
			}
			foreach (var item in itemG)
			{
				var chs = item.Characters?.ToArray();
				if (chs is null or { Length: 0 }) chs = new[] { "？" };
				<div class="aozora_dictionary_result">
					@foreach (var ch in chs)
					{
						string ch2 = ch;
						if (ch2.Length == 0 || System.Globalization.CharUnicodeInfo.GetUnicodeCategory(ch2, 0) == System.Globalization.UnicodeCategory.PrivateUse) ch2 = "？";

						<button class="@(ch2.Length<=1 ? "aozora_dictionary_result_character":"aozora_dictionary_result_character_long")" onclick="document.getElementById('@(item.Guid)').scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'});">@ch2</button>
					}
				</div>
			}
		}
	</div>

	<div class="aozora_dictionary_result_detail_container">
		@foreach (var itemG in SearchResults)
		{
			foreach (var item in itemG)
			{
				@GetEntryHtml(item)
			}
		}
	</div>
}
<h1>注意</h1>
<ul>
	<li>このデータは「<a href="https://www.aozora.gr.jp/gaiji_chuki/" target="_blank">青空文庫・外字注記辞書【第八版】</a>」をベースにしています。</li>
	<li>変換の関係で多くの字形に誤りがあります。公式のドキュメントで確認してください。</li>
	<li>環境によっては表示されない文字があります。</li>
	<li>部首の字形が複数ある場合は画数が複数表示されることがあります。</li>
	<li>注記に文字コードが含まれている場合、字形は元データではなく注記情報に基づいた表記になります。</li>
	<li>文字コードは表示されている文字に対応しています。字形が誤りの場合は文字コードも誤りです。その他の理由の誤りもあります。</li>
	<li>青空文庫外部で利用する場合、Shift_JISではなくUTF-8などを利用して外字の使用を避けることも可能です。互換性が低下する点には注意してください。</li>
</ul>

@code {
	string _SearchText = string.Empty;
	string SearchText

	{
		get => _SearchText; set

		{
			_SearchText = value;
			InvokeSearch();
			StateHasChanged();
		}
	}
	bool SearchInfoVisible { get; set; } = false;
	bool SearchOptionVisible { get; set; } = false;

	SearchOptionTargets SearchOptionTarget { get; set; } = SearchOptionTargets.All;

	void InvokeSearch()
	{

	}


	enum SearchOptionTargets
	{
		All, Kanji, Radical,
	}

	string GetSearchOptionTargetsTitle(SearchOptionTargets target) => target switch
	{
		SearchOptionTargets.All => "全て",
		SearchOptionTargets.Kanji => "漢字",
		SearchOptionTargets.Radical => "部首",
		_ => string.Empty,
	};

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(() => Aozora.GaijiChuki.Manager.LoadContent());
		await base.OnInitializedAsync();
	}

	IEnumerable<Models.IDictionaryResultGroup> SearchResults { get; set; } = new Models.IDictionaryResultGroup[0];

	void SelectPageOther(PageOther page)
	{
		if (page?.entries is null) return;
		SearchResults = new[] { new Models.DictionaryResultGroupRadicalOther(page.entries.Select(a => new Models.DictionaryResultEntryGaijiChukiOther(a, page)).ToArray(), page) };
		StateHasChanged();
	}


	void SelectPage(page page)
	{
		if (page?.entries is null) return;
		SearchResults = new[] { new Models.DictionaryResultGroupRadical(page.entries.Select(a => new Models.DictionaryResultEntryGaijiChuki(a, page)).ToArray(), page) };
		StateHasChanged();
	}

	RenderFragment GetEntryHtml(Models.IDictionaryResultEntry item)
	{
		switch (item)
		{
			case Models.DictionaryResultEntryGaijiChuki itemGc:
				return GetEntryHtml(item,
	@<text>
		@switch (itemGc.Content.Item)
		{
			case entryCompatible78Inclusion i1:
				<div class="aozora_dictionary_result_detail_item_info_icon">
					78互換包摂：@(
					i1.@ref
						)
				</div>
				break;
			case entryDesignVariant i2:
				<div class="aozora_dictionary_result_detail_item_info_icon">
					デザイン差：@(
						i2.@ref
							)
				</div>
				break;
			case entryInclusionApplication i3:
				var t1 = i3.Item switch { string s => s, note n => n.full, _ => string.Empty };
				<div class="aozora_dictionary_result_detail_item_info_icon">包摂適用：@t1</div>
				break;
			case entryIntegrationApplication i4:
				var t2 = i4.Item switch { string s => s, note n => n.full, _ => string.Empty };
				<div class="aozora_dictionary_result_detail_item_info_icon">統合適用：@t2</div>
				break;
			case object:
				<div class="aozora_dictionary_result_detail_item_info_icon">入力可能</div>
				break;
		}
		@switch (itemGc.Content.supplement)
		{
			case entrySupplement.supplementCommon:
				<div class="aozora_dictionary_result_detail_item_info_icon">補助漢字と共通</div>
				break;
			case entrySupplement.supplementOnly:
				<div class="aozora_dictionary_result_detail_item_info_icon">補助のみ</div>
				break;
		}
		@foreach (var ucv in itemGc.Content.UCV ?? new entryUCV[0])
		{
			<div class="aozora_dictionary_result_detail_item_info_icon">
				UCV@(
					ucv.number
						)
			</div>
		}
	</text>
	,
	@<text>
		@if (itemGc.Content.duplicate)
		{
			<span title="本来の部首ではありません。索引用の参考です。">★</span>
		}
		@(Aozora.GaijiChuki.Manager.Tools.GetStrokesText(itemGc.Content, itemGc.Page))
	</text>
		);
			case Models.DictionaryResultSingleChar itemRs:
				return GetEntryHtml(item, null, null);
			default:
				return GetEntryHtml(item, null, null);

		}
	}

	RenderFragment GetEntryHtml(Models.IDictionaryResultEntry item, RenderFragment? noteAppendHtml, RenderFragment? strokeHtml)
	{
		return
	@<div class="aozora_dictionary_result_detail_item" id="@(item.Guid)">
		<div class="aozora_dictionary_result_detail_item_character">
			@{
				var categories = item.UnicodeCategory.GetEnumerator();
				var chs = item.Characters.ToArray();
				chs = chs.Length == 0 ? new[] { "？" } : chs;
				foreach (var ch in chs)
				{
					if (categories.Current == System.Globalization.UnicodeCategory.PrivateUse)
					{
						<text>？</text>
					}
					else
					{
						<text>@ch</text>
					}
				}
			}
		</div>
		<div class="aozora_dictionary_result_detail_item_info_container">
			<div class="aozora_dictionary_result_detail_item_info_note_container">
				@if (noteAppendHtml is not null)
				{
					@noteAppendHtml
				}

				@if (!string.IsNullOrWhiteSpace(item.Note))
				{
					<div class="aozora_dictionary_result_detail_item_info_note">
						※［＃@(
							item.Note
								)］
					</div>
				}
			</div>
			<table>
				@if (item.Jisx0213Code != Models.DictionaryResultEntryGaijiChuki.Jisx0213CodeEmpty && item.Characters.Count() < 2)
				{
					<tr>
						<th>JIS X 0213</th>
						<td>
							@(
								Aozora.Helpers.YamlValues.Jisx0213NumberToFormated(item.Jisx0213Code)
									)
						</td>
					</tr>
				}
				@if (item.Unicode.Any())
				{
					<tr>
						<th>Unicode</th>
						<td>
							@(
								string.Join(' ', item.Unicode)
									)
						</td>
					</tr>
				}
				@if (strokeHtml is not null)
				{
					<tr>
						<th>画数</th>
						<td>
							@strokeHtml
						</td>
					</tr>
				}
			</table>
		</div>
	</div>;
	}
}
