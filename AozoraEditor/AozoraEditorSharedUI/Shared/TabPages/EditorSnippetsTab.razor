@implements ITabPage

@code {
	public string FileName => "Snippets.xml";

	public RenderFragment Title =>@<span>@FileName</span>;

	public RenderFragment Body =>
	@<SplitPage @ref="splitPage">
		<Left><StandaloneCodeEditor Id="@(Id.ToString())" ConstructionOptions="EditorConstructionOptions" @ref="Editor" /></Left>
		<Right><CascadingValue Name="SnippetsIndex" Value="SnippetsIndex"><AozoraEditor.Shared.Shared.SubPanels.SnippetsList /></CascadingValue></Right>
		</SplitPage>
	;

	public StandaloneCodeEditor? Editor;

	SplitPage? splitPage { get; set; }

	public Snippets.Index? SnippetsIndex { get; set; }

	[Parameter]
	public string OriginalText { get; set; } = string.Empty;

	private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
	{
		return new StandaloneEditorConstructionOptions
			{
				AutomaticLayout = true,
				Language = "json",
				Value = OriginalText,
				Folding = true,
				WordWrap = "on",
				Suggest = new SuggestOptions()
				{
					SnippetsPreventQuickSuggestions = false,
				},
				UnicodeHighlight = new UnicodeHighlightOptions()
				{
					AmbiguousCharacters = false,
					InvisibleCharacters = false,
				}
			};
	}

	public event EventHandler? TitleChanged;

	public FullEditor? Root { get; set; }

	public System.Collections.ObjectModel.ObservableCollection<ICommandEntry> PanelSwitchCommands { get; }
	public System.Collections.ObjectModel.ObservableCollection<ICommandEntry> MainCommands { get; } = new();

	public Guid Id { get; set; }

	public IEnumerable<Menu.IMenuItemSingle> GetMenus(string key) => Array.Empty<Menu.IMenuItemSingle>();

	public EditorSnippetsTab()
	{
		PanelSwitchCommands = new()
		{
			CommandEntry.FromMaterialSymbolOutlined("snippet_folder", "プレビュー", (_, _) =>
			{
				if(splitPage is null) return;
				splitPage.DisplayMode= Root?.SplitVerticalDefault ?? true ? SplitPage.DisplayModes.Separated:SplitPage.DisplayModes.SeparetedVertical;
			}),
			CommandEntry.FromMaterialSymbolOutlined("close", "閉じる", (_, _) =>
			{
				if(splitPage is null) return;
				splitPage.DisplayMode= SplitPage.DisplayModes.MainFull;
			})
		};
	}
}
