@implements ITabPage

@code {
	public string FileName => "Snippets.json";

	public RenderFragment Title =>@<span>@FileName</span>;

	public RenderFragment Body =>
	@<SplitPage @ref="splitPage">
		<Left><StandaloneCodeEditor Id="@(Id.ToString())" ConstructionOptions="EditorConstructionOptions" @ref="Editor" /></Left>
		<Right><article style="overflow:auto;width: 100%;height: 100%;"><CascadingValue Name="SnippetsIndex" Value="SnippetsIndex"><AozoraEditor.Shared.Shared.SubPanels.SnippetsList /></CascadingValue></article></Right>
		</SplitPage>
	;

	public StandaloneCodeEditor? Editor;

	SplitPage? splitPage { get; set; }

	public Snippets.Index? SnippetsIndex { get; set; }

	[Parameter]
	public string OriginalText { get; set; } = string.Empty;

	private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
	{
		return new StandaloneEditorConstructionOptions
			{
				AutomaticLayout = true,
				Language = "json",
				Value = OriginalText,
				Folding = true,
				WordWrap = "on",
				Suggest = new SuggestOptions()
				{
					SnippetsPreventQuickSuggestions = false,
				},
				UnicodeHighlight = new UnicodeHighlightOptions()
				{
					AmbiguousCharacters = false,
					InvisibleCharacters = false,
				}
			};
	}

	public event EventHandler? TitleChanged;

	public FullEditor? Root { get; set; }

	public System.Collections.ObjectModel.ObservableCollection<ICommandEntry> PanelSwitchCommands { get; }
	public System.Collections.ObjectModel.ObservableCollection<ICommandEntry> MainCommands { get; }

	public Guid Id { get; set; }

	public IEnumerable<Menu.IMenuItemSingle> GetMenus(string key) => Array.Empty<Menu.IMenuItemSingle>();

	public EditorSnippetsTab()
	{
		PanelSwitchCommands = new()
		{
			CommandEntry.FromMaterialSymbolOutlined("snippet_folder", "プレビュー", (_, _) =>
			{
				if(splitPage is null) return;
				splitPage.DisplayMode= Root?.SplitVerticalDefault ?? true ? SplitPage.DisplayModes.Separated:SplitPage.DisplayModes.SeparetedVertical;
			}),
			CommandEntry.FromMaterialSymbolOutlined("close", "閉じる", (_, _) =>
			{
				if(splitPage is null) return;
				splitPage.DisplayMode= SplitPage.DisplayModes.MainFull;
			})
		};

		MainCommands = new()
		{
			CommandEntry.FromMaterialSymbolOutlined("save", "ローカルに保存", async (_, _) =>
			{
				await DownloadText();
			}),
			CommandEntry.FromMaterialSymbolOutlined("play_arrow", "プレビューを作成", async (_, _) =>
			{
				await ShowPreview();
				if(splitPage is null) return;
				splitPage.DisplayMode= Root?.SplitVerticalDefault ?? true ? SplitPage.DisplayModes.Separated:SplitPage.DisplayModes.SeparetedVertical;
			}),
		};
	}

	public static async Task<Json.Schema.EvaluationResults?> Validiate(string text)
	{
		try
		{
			var schema = await Snippets.Loader.LoadSchemaFromResouceAsJsonSchema(true);
			var node = System.Text.Json.Nodes.JsonNode.Parse(text);
			return schema.Evaluate(node);
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
			return null;
		}
	}

	public async Task ShowPreview()
	{
		if (Editor is null) return;
		var text = await Editor.GetValue();
		try
		{
			var snippets= Snippets.Schema.Snippets.FromJson(text);
			SnippetsIndex = new Snippets.Index(snippets);
		}
		catch
		{
		}
	}

	public async Task DownloadText()
	{
		using var ms = new MemoryStream();
		if (Editor is null) goto fail;
		if (Root is null) return;
		var text = await Editor.GetValue();
		// {
		// 	var result = await Validiate(text);
		// 	if (result is null || !result.IsValid)
		// 	{
		// 		if (Root?.Dialog is not null) await Root.Dialog.ShowDialog("保存", $"JSONが不正です。", FullEditor.GetMaterialSymbolOutlined("error"), new Dialogs.DialogOption() { Id = "ok", Text = "了解", IsHighlighted = true });
		// 		return;
		// 	}
		// }
		//TabはJSRuntimeをinjectできないので、雑かつ強引にRootから参照。
		if (await FullEditor.DownloadText(Root.JSRuntime, FileName, text)) return;
		fail:
		if (Root?.Dialog is not null) await Root.Dialog.ShowDialog("保存", "ファイルのダウンロードに失敗しました", FullEditor.GetMaterialSymbolOutlined("error"), new Dialogs.DialogOption() { Id = "ok", Text = "了解", IsHighlighted = true });
		return;
	}
}
