@implements ITabPage

@code {

	public EditorTab(Guid id, string text, string fileName)
	{
		Id = id;
		OriginalText = text;
		_FileName = fileName;
	}

	public RenderFragment Title =>@<span>@Content?.FileName</span>;

	public RenderFragment Body =>@<CascadingValue Value="@Id"><EditorPage @ref="Content" OriginalText="@OriginalText" /></CascadingValue>;

	[Parameter]
	public string OriginalText { get; set; } = string.Empty;

	string _FileName = string.Empty;

	public string FileName
	{
		get => Content?.FileName ?? _FileName; set
		{
			_FileName = value;
			if (Content is not null) Content.FileName = value;
		}
	}


	EditorPage? _Content;
	public EditorPage? Content
	{
		get => _Content;
		private set
		{
			_Content = value;
			if (_Content is not null)
			{
				_Content.FileName = _FileName;
				_Content.Root = this.Root;
				var currentContent = _Content;
				currentContent.TitleChanged += (_, e) =>
				{
					TitleChanged?.Invoke(this, e);
					Root?.NotifyStateChanged();
				};
				Root?.NotifyStateChanged();

				PanelSwitchCommands.Clear();
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("difference", "差分を表示");
					com.Clicked += async (_, _) =>
					{
						if (Root is null) return;
						var text = await currentContent.GetText();
						if (text is null) return;
						Root.ShowDiffTab(currentContent.FileName, currentContent.OriginalText, text);
					};
					PanelSwitchCommands.Add(com);
				}
				PanelSwitchCommands.Add(new CommandEntrySeparator());
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("preview", "プレビュー");
					com.Clicked += (_, _) =>
					{
						currentContent.SubPanelSwitchTo(SubPanel.SubPanelContents.Iframe);
					};
					PanelSwitchCommands.Add(com);
				}
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("snippet_folder", "スニペット一覧");
					com.Clicked += (_, _) =>
					{
						currentContent.SubPanelSwitchTo(SubPanel.SubPanelContents.Snippets);
					};
					PanelSwitchCommands.Add(com);
				}
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("glyphs", "文字検索");
					com.Clicked += (_, _) =>
					{
						currentContent.SubPanelSwitchTo(SubPanel.SubPanelContents.Dictionary);
					};
					PanelSwitchCommands.Add(com);
				}

				{
					var com = CommandEntry.FromMaterialSymbolOutlined("close", "閉じる");
					//com.IsEnabled = false;
					com.Clicked += (_, _) =>
					{
						currentContent.DisplayMode = SplitPage.DisplayModes.MainFull;
					};
					PanelSwitchCommands.Add(com);
				}

				MainCommands.Clear();
				//{
				//	var com = CommandEntryFile.FromMaterialSymbolOutlined("file_open", "開く");
				//	com.FileChanged += async (_, e) =>
				//	{
				//		if (e.FileCount != 1 || e.File?.Name == null) return;
				//		try
				//		{
				//			var stream = e.File.OpenReadStream(CommandEntryFile.MaxFileSize);
				//			await currentContent.LoadFile(stream, e.File.Name);
				//		}
				//		catch
				//		{
				//			Console.WriteLine("ファイルの読み込みに失敗しました。");
				//		}
				//	};
				//	MainCommands.Add(com);
				//}
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("save", "ファイルを保存");
					com.Clicked += async (_, _) =>
					{
						await currentContent.DownloadText();
					};
					MainCommands.Add(com);
				}
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("play_arrow", "プレビューを作成");
					com.Clicked += async (_, _) =>
					{
						await currentContent.ShowPreview();
					};
					MainCommands.Add(com);
				}
			}
		}
	}

	public System.Collections.ObjectModel.ObservableCollection<ICommandEntry> PanelSwitchCommands { get; } = new();
	public System.Collections.ObjectModel.ObservableCollection<ICommandEntry> MainCommands { get; } = new();


	public Guid Id { get; set; }

	public event EventHandler? TitleChanged;

	public TabControl? Root { get; set; }
}
