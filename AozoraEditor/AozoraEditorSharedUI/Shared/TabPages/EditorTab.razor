@implements ITabPage

@code {

	public EditorTab()
	{
	}

	public RenderFragment Title =>@<div>@Content?.FileName</div>;

	public RenderFragment Body =>@<EditorPage @ref="Content" />;

	EditorPage? _Content;
	EditorPage? Content
	{
		get => _Content;
		set
		{
			_Content = value;
			if (_Content is not null)
			{
				var currentContent = _Content;
				currentContent.TitleChanged += (_, e) =>
				{
					TitleChanged?.Invoke(this, e);
					Parent?.NotifyStateChanged();
				};
				Parent?.NotifyStateChanged();

				PanelSwitchCommands.Clear();
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("preview", "プレビュー");
					com.Clicked += async (_, _) =>
					{
						if (currentContent is null) return;
						await currentContent.ShowPreview();
					};
					PanelSwitchCommands.Add(com);
				}
				{
					var com = CommandEntryFile.FromMaterialSymbolOutlined("file_open", "開く");
					com.FileChanged += async (_, e) =>
					{
						if (e.FileCount != 1 || e.File?.Name == null) return;
						try
						{
							var stream = e.File.OpenReadStream(CommandEntryFile.MaxFileSize);
							await currentContent.LoadFile(stream, e.File.Name);
						}
						catch
						{
							Console.WriteLine("ファイルの読み込みに失敗しました。");
						}
					};
					MainCommands.Add(com);
				}
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("save", "ファイルを保存");
					com.Clicked += async (_, _) =>
					{
						if (currentContent is null) return;
						await currentContent.DownloadText();
					};
					MainCommands.Add(com);
				}
			}
		}
	}

	public System.Collections.ObjectModel.ObservableCollection<ICommandEntry> PanelSwitchCommands { get; } = new();
	public System.Collections.ObjectModel.ObservableCollection<ICommandEntry> MainCommands { get; } = new();


	public event EventHandler? TitleChanged;

	public TabControl? Parent { get; set; }
}
