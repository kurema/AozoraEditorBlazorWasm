@implements ITabPage

@code {

	public EditorTab(Guid id, string text, string fileName)
	{
		Id = id;
		OriginalText = text;
		_FileName = fileName;
	}

	public RenderFragment Title =>@<span>@Content?.FileName</span>;

	RenderFragment? _Body = null;

	public RenderFragment Body
	{
		get
		{
			return _Body ??=@<EditorPage Id="@Id" @ref="Content" OriginalText="@OriginalText" />;
		}
	}

	[Parameter]
	public string OriginalText { get; set; } = string.Empty;

	string _FileName = string.Empty;

	public string FileName
	{
		get => Content?.FileName ?? _FileName; set
		{
			_FileName = value;
			if (Content is not null) Content.FileName = value;
		}
	}

	public static CommandEntryToggle GetSplitToggleCommand(bool defaultSplit) =>
	new CommandEntryToggle(
		FullEditor.GetMaterialSymbolOutlined("splitscreen_left", "font-variation-settings:'FILL' 1;"),
		FullEditor.GetMaterialSymbolOutlined("splitscreen", "font-variation-settings:'FILL' 1;"), "水平分割", "垂直分割", defaultSplit);


	EditorPage? _Content;
	public EditorPage? Content
	{
		get => _Content;
		private set
		{
			_Content = value;
			if (_Content is not null)
			{
				_Content.FileName = _FileName;
				_Content.Root = this.Root;
				_Content.SplitVertical = Root?.SplitVerticalDefault ?? true;
				var currentContent = _Content;
				currentContent.TitleChanged += (_, e) =>
				{
					TitleChanged?.Invoke(this, e);
					Root?.NotifyStateChanged();
				};
				Root?.NotifyStateChanged();

				PanelSwitchCommands.Clear();
				{
					var com = EditorTab.GetSplitToggleCommand(currentContent.SplitVertical);
					com.Checked += (_, _) => currentContent.SplitVertical = true;
					com.UnChecked += (_, _) => currentContent.SplitVertical = false;
					PanelSwitchCommands.Add(com);
				}
				PanelSwitchCommands.Add(new CommandEntrySeparator());
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("difference", "差分を表示 (新規タブ)");
					com.Clicked += async (_, _) =>
					{
						if (Root is null) return;
						var text = await currentContent.GetText();
						if (text is null) return;
						Root.ShowDiffTab(currentContent.FileName, currentContent.OriginalText, text);
					};
					PanelSwitchCommands.Add(com);
				}
				PanelSwitchCommands.Add(new CommandEntrySeparator());
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("preview", "プレビュー");
					com.Clicked += (_, _) =>
					{
						currentContent.SubPanelSwitchTo(SubPanel.SubPanelContents.Iframe);
					};
					PanelSwitchCommands.Add(com);
				}
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("snippet_folder", "スニペット一覧");
					com.Clicked += (_, _) =>
					{
						currentContent.SubPanelSwitchTo(SubPanel.SubPanelContents.Snippets);
					};
					PanelSwitchCommands.Add(com);
				}
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("glyphs", "文字検索");
					com.Clicked += (_, _) =>
					{
						currentContent.SubPanelSwitchTo(SubPanel.SubPanelContents.Dictionary);
					};
					PanelSwitchCommands.Add(com);
				}

				{
					var com = CommandEntry.FromMaterialSymbolOutlined("close", "閉じる");
					//com.IsEnabled = false;
					com.Clicked += (_, _) =>
					{
						currentContent.DisplayMode = SplitPage.DisplayModes.MainFull;
					};
					PanelSwitchCommands.Add(com);
				}

				MainCommands.Clear();
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("save", "ファイルを保存");
					com.Clicked += async (_, _) =>
					{
						await currentContent.DownloadText();
					};
					MainCommands.Add(com);
				}
				{
					var com = CommandEntry.FromMaterialSymbolOutlined("play_arrow", "プレビューを作成");
					com.Clicked += async (_, _) =>
					{
						await currentContent.ShowPreview();
					};
					MainCommands.Add(com);
				}

				if (Root is not null)
				{
					_Menus = new()
					{
						{
							"Save",
							new Menu.IMenuItemSingle[]
							{
								new Menu.MenuItem(){Title=$"{currentContent.FileName}の保存",
								OnHeaderSelected=EventCallback.Factory.Create(Root,async ()=>{await currentContent.DownloadText(); Root.HideMenuBar(); })
								},
							}
						},
						{
							"Build",
							new Menu.IMenuItemSingle[]
							{
								new Menu.MenuItem(){Title="プレビューを作成",
								OnHeaderSelected=EventCallback.Factory.Create(Root,async ()=>{await currentContent.ShowPreview();; Root.HideMenuBar(); })
								},
							}
						}
					};
				}
			}
		}
	}

	public System.Collections.ObjectModel.ObservableCollection<ICommandEntry> PanelSwitchCommands { get; } = new();
	public System.Collections.ObjectModel.ObservableCollection<ICommandEntry> MainCommands { get; } = new();

	public Guid Id { get; set; }

	public event EventHandler? TitleChanged;

	public FullEditor? Root { get; set; }

	Dictionary<string, Menu.IMenuItemSingle[]>? _Menus;

	public IEnumerable<Menu.IMenuItemSingle> GetMenus(string key)
	{
		if (_Menus is null || _Menus.TryGetValue(key, out var result) != true) return Array.Empty<Menu.IMenuItemSingle>();
		return result;
	}
}
