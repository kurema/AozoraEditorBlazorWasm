@inject IJSRuntime jsRuntime

<div class="tab_control_container">
	<div class="tab_control_top_container">
		<AozoraEditor.Shared.Shared.Menu.MenuBar @ref="MenuBar">
			<AozoraEditor.Shared.Shared.Menu.MenuItem Title="ファイル">
				<AozoraEditor.Shared.Shared.Menu.MenuItem Title="新規作成" OnHeaderSelected="()=>{AddEditorTab();}"  IconMaterialSymbols="note_add" />
				<AozoraEditor.Shared.Shared.Menu.MenuItem Title="開く" />
				<AozoraEditor.Shared.Shared.Menu.MenuItem Title="最近使ったファイル">
					<AozoraEditor.Shared.Shared.Menu.MenuItem Title="テスト1.txt" />
					<AozoraEditor.Shared.Shared.Menu.MenuItem Title="テスト2.txt" />
					<AozoraEditor.Shared.Shared.Menu.MenuItem Title="テスト3.txt" />
				</AozoraEditor.Shared.Shared.Menu.MenuItem>
			</AozoraEditor.Shared.Shared.Menu.MenuItem>
			<AozoraEditor.Shared.Shared.Menu.MenuItem Title="編集">
			</AozoraEditor.Shared.Shared.Menu.MenuItem>
			<AozoraEditor.Shared.Shared.Menu.MenuItem Title="選択" />
			<AozoraEditor.Shared.Shared.Menu.MenuItem Title="ヘルプ">
				<AozoraEditor.Shared.Shared.Menu.MenuItem Title="ヒント" />
				<AozoraEditor.Shared.Shared.Menu.MenuItem Title="アプリについて">
					<AozoraEditor.Shared.Shared.Menu.MenuItem IconMaterialSymbols="open_in_new_down" Title="GitHub" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://github.com/kurema/AozoraEditorBlazorWasm");})" />
					<AozoraEditor.Shared.Shared.Menu.MenuItem Title="プライバシーポリシー" />
				</AozoraEditor.Shared.Shared.Menu.MenuItem>
				<AozoraEditor.Shared.Shared.Menu.MenuItem Title="バージョン情報" IconMaterialSymbols="info" OnHeaderSelected="async ()=>{await ShowVersionInfo();}" />
			</AozoraEditor.Shared.Shared.Menu.MenuItem>
		</AozoraEditor.Shared.Shared.Menu.MenuBar>
		<div class="tab_control_main_buttons">
			@{
				IEnumerable<ICommandEntry> commands = CommonCommands;

				if (commands.Any())
				{
					// ここでSeparatorを入れるべきか？
				}
				if (ActivePage?.MainCommands is not null) { commands = commands.Concat(ActivePage.MainCommands); }

				foreach (var item in commands)
				{
					switch (item)
					{
						case CommandEntry itemC:
							<button class="ButtonMini" @onclick="()=>itemC.OnClick()">
								@item.Icon
							</button>
							break;
						case CommandEntryFile itemF:
							<div class="FileInputButton ButtonMini">
								@item.Icon
								<Microsoft.AspNetCore.Components.Forms.InputFile OnChange="(e)=>itemF?.OnFileChanged(e)" />
							</div>
							break;
					}
				}
			}
		</div>
	</div>

	<div class="tab_control_background" />

	<div class="tab_control_controller">
		@foreach (var item in Pages)
		{
			var cl = item == ActivePage ? "tab_control_controller_tab_active" : "tab_control_controller_tab";

			<div @onclick="(e)=>ActivateTab(e,item)" class="@cl">
				<p class="tab_control_controller_tab_title">@item.Title</p>
				<button @onclick:preventDefault @onclick:stopPropagation="true" class="ButtonMini tab_control_controller_tab_close" @onclick="async ()=>{await CloseTab(item);}">
					<span class="material-symbols-outlined">
						close
					</span>
				</button>
			</div>
		}
		<div class="tab_control_controller_add">
			<button class="ButtonMini tab_control_controller_add_button" @onclick="()=>{AddEditorTab();}">
				<span class="material-symbols-outlined">
					add
				</span>
			</button>
		</div>

	</div>

	<div class="tab_control_panel_switch_buttons">
		@if (ActivePage?.PanelSwitchCommands is not null)
		{
			foreach (var item in ActivePage.PanelSwitchCommands)
			{
				switch (item)
				{
					case CommandEntry itemC:
						<button class="ButtonMini" @onclick="()=>itemC.OnClick()">
							@item.Icon
						</button>
						break;
					case CommandEntryFile itemF:
						<div class="FileInputButton ButtonMini">
							@item.Icon
							<Microsoft.AspNetCore.Components.Forms.InputFile OnChange="(e)=>itemF?.OnFileChanged(e)" />
						</div>
						break;
				}
			}
		}
	</div>

	<div class="tab_control_body">
		@foreach (var item in Pages)
		{
			bool active = item == ActivePage;
			string additonalClass = active ? "tab_page_container_active" : "hidden";
			<div class="tab_page_container @additonalClass">
				@item.Body
			</div>
		}
	</div>

</div>

<style>
	.tab_control_container {
		display: grid;
		grid-template-rows: auto auto 1fr;
		grid-template-columns: 1fr auto;
		flex: 1 0 0;
	}

	.tab_control_controller {
		grid-row: 2/3;
		grid-column: 1/2;
		min-width: 0;
		min-height: 0;
	}

	.tab_control_top_container {
		background: #f8f8f8;
		grid-row: 1/2;
		grid-column: 1/3;
		min-width: 0;
		min-height: 0;
		display: flex;
		flex-direction: row;
		/*border-bottom: 1px solid rgba(0, 0, 0, 0.1);*/
		align-items: center;
	}

		.tab_control_top_container > .menubar {
		}

		.tab_control_top_container > .tab_control_main_buttons {
			display: flex;
			align-items: center;
		}


	.tab_control_background {
		background: #f8f8f8;
		grid-row: 2/3;
		grid-column: 1/3;
		min-width: 0;
		min-height: 0;
		border-bottom: 1px solid rgba(0, 0, 0, 0.1);
	}

	.tab_control_controller_tab, .tab_control_controller_tab_active {
		min-width: 6em;
		display: inline-grid;
		grid-template-columns: 1fr auto;
		margin: 0 4px;
	}

	.tab_control_controller_tab {
		background: #f8f8f8;
		border-bottom: 1px solid rgba(0, 0, 0, 0.1);
	}

		.tab_control_controller_tab:hover {
			background: #e8e8e8;
		}


	.tab_control_controller_tab_active {
		background: white;
		border-right: 1px solid rgba(0, 0, 0, 0.1);
		border-left: 1px solid rgba(0, 0, 0, 0.1);
		border-top: 1px solid #005fb8;
		border-bottom: 1px solid white;
	}

	.tab_control_controller_tab_title {
		margin: 4px;
		display: inline-block;
		grid-row: 1/2;
		grid-column: 1/2;
		vertical-align: central;
		font-size: 13px;
		/*line-height: 22px;*/
		font-family: Segoe WPC,Segoe UI,sans-serif;
		user-select: none;
	}

	.tab_control_controller_add {
		background: white;
		display: inline-grid;
		vertical-align: bottom;
		border: 1px solid rgba(0, 0, 0, 0.1);
	}

	.tab_control_controller_add_button {
		flex: 1 0 0;
	}

	.tab_control_controller_tab:hover .tab_control_controller_tab_close, .tab_control_controller_tab_active .tab_control_controller_tab_close {
		opacity: 100%;
	}

	.tab_control_controller_tab_close {
		display: inline-block;
		grid-row: 1/2;
		grid-column: 2/3;
		vertical-align: bottom;
		opacity: 0;
	}

	.tab_control_panel_switch_buttons {
		grid-row: 2/3;
		grid-column: 2/3;
		min-width: 0;
		min-height: 0;
	}


	.tab_control_body {
		grid-row: 3/4;
		grid-column: 1/3;
		min-width: 0;
		min-height: 0;
		display: flex;
	}

	.tab_page_container {
		display: flex;
		flex: 1 0 0;
	}

	.tab_page_container_active {
	}

	.hidden {
		/*ToDo: どっかに統合。*/
		display: none;
	}


	.ButtonMini {
		background-color: transparent;
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
		border: 0;
		border-radius: 0;
		padding: 2px;
	}

		.ButtonMini:hover {
			background-color: #7F7F7F22;
		}

	.FileInputButton {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		position: relative;
	}

		.FileInputButton input[type=file] {
			position: absolute;
			width: 100%;
			height: 100%;
			/* このやり方はちょっと良くない(コメントアウトすれば分かるが隙間は押せない)。けどほぼ問題なし。 */
			opacity: 0;
			cursor: pointer;
		}
</style>

@code {
	[CascadingParameter]
	public FullEditor? Parent { get; set; }

	AozoraEditor.Shared.Shared.Menu.MenuBar? MenuBar { get; set; }

	ICommandEntry[] CommonCommands
	{
		get
		{
			return new ICommandEntry[0];
		}
	}

	public void HideMenuBar()
	{
		MenuBar?.Hide();
	}

	protected override async Task OnInitializedAsync()
	{
		if (ActivePage is null && Pages.Count > 0) ActivateTab(Pages[0]);
		await base.OnInitializedAsync();
	}

	System.Collections.ObjectModel.ObservableCollection<ITabPage> Pages = new() { new TabPages.EditorTab() };
	public ITabPage? ActivePage { get; set; }

	public void ActivateTab(MouseEventArgs e, ITabPage page)
	{
		ActivateTab(page);
	}

	public void ActivateTab(ITabPage page)
	{
		ActivePage = page;
		page.Parent = this;
		StateHasChanged();
	}

	public async Task CloseTab(ITabPage page)
	{
		if (Parent?.Dialog is null) return;
		var result = await Parent.Dialog.ShowDialog("確認", "閉じますか？", Dialogs.Dialog.IconMessage, new Dialogs.DialogOption("はい", true) { Id = "yes" }, new Dialogs.DialogOption("キャンセル") { Id = "no" });
		if (result.Id is string and "no") return;
		if (!Pages.Contains(page)) return;
		if (ActivePage == page)
		{
			int count = Pages.IndexOf(page);
			count = count == 0 ? 1 : count - 1;
			if (Pages.Count > count) ActivateTab(Pages[count]); else ActivePage = null;
		}
		Pages.Remove(page);
		StateHasChanged();
	}

	public void AddEditorTab()
	{
		var page = new TabPages.EditorTab();
		Pages.Add(page);
		ActivateTab(page);
	}

	public static RenderFragment GetMaterialSymbolOutlined(string name)
	{
		return @<span class="material-symbols-outlined">@name</span>;
	}

	public void NotifyStateChanged()
	{
		StateHasChanged();
	}

	public async Task OpenInNewTab(string url)
	{
		await jsRuntime.InvokeVoidAsync("open", url, "_blank");
	}

	public async Task ShowVersionInfo()
	{
		if (Parent?.Dialog is null) return;
		await Parent.Dialog.ShowDialog("青空文庫形式エディタ", "作者：kurema", Dialogs.Dialog.IconMessage, new Dialogs.DialogOption("はい", true) { Id = "yes" });
	}
}
