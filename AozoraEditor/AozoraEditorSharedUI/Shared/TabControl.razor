@inject IJSRuntime jsRuntime
@using AozoraEditor.Shared.Shared.Menu

<AozoraEditor.Shared.Shared.Themes.ThemeControl @ref="Theme" />
<CascadingValue Value="this" Name="Root">
	<div class="aozora_editor_top @(OutputVisible?"aozoa_editor_top_show_output ":"")" @onclick="()=>{HideMenuBar();}">
		<div class="tab_control_top_container">
			<div class="tab_control_top_left">
				<MenuBar @ref="MenuBar">
					<MenuItem Title="ファイル">
						<MenuItem Title="新規作成" OnHeaderSelected="()=>{AddEditorTab();}" IconMaterialSymbols="note_add" />
						<MenuItem Title="開く" />
					</MenuItem>
					<MenuItem Title="設定">
						<MenuItem Title="テーマ">
							@if (Theme is not null)
							{
								foreach (var theme in Theme.ThemeEntries)
								{
									<MenuItemCheckbox Title="@(theme.Title)" IsChecked="@(theme == Theme.SelectedTheme)" Checked="()=>{Theme.SelectedTheme=theme;}" />
								}
							}
						</MenuItem>
						<MenuItem Title="プレビュー">
							<MenuItemCheckbox Title="縦書き" IsChecked="PreviewVertical" Checked="()=>{PreviewVertical=true;}" UnChecked="()=>{PreviewVertical=false;}" />
							<MenuItemCheckbox Title="余白なし" IsChecked="PreviewNoMargin" Checked="()=>{PreviewNoMargin=true;}" UnChecked="()=>{PreviewNoMargin=false;}" />
						</MenuItem>
						<MenuItem Title="通知">
							<MenuItemCheckbox Title="UTF-8で保存した場合の通知" IsChecked="WarnUTF8" Checked="()=>{WarnUTF8=true;}" UnChecked="()=>{WarnUTF8=false;}" />
						</MenuItem>
					</MenuItem>
					<MenuItem Title="ヘルプ">
						<MenuItem Title="青空文庫">
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="青空文庫" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://www.aozora.gr.jp/");})" />
							<MenuSeparater />
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="作業マニュアル" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://www.aozora.gr.jp/aozora-manual/");})" />
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="注記一覧" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://www.aozora.gr.jp/annotation/");})" />
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="耕作員手帳" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://www.aozora.gr.jp/guide/techo.html");})" />
						</MenuItem>
						<MenuItem Title="アプリについて">
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="プロジェクトページ" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://github.com/kurema/AozoraEditorBlazorWasm");})" />
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="ライセンス" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://github.com/kurema/AozoraEditorBlazorWasm/blob/master/LICENSE");})" />
							<MenuItem Title="サードパーティーライセンス" OnHeaderSelected="@(async ()=>{OepnInNewInternalTab("_content/AozoraEditorSharedUI/thirdparty.xml","サードパーティー");})" />
						</MenuItem>
						<MenuSeparater />
						<MenuItem Title="バージョン情報" IconMaterialSymbols="info" OnHeaderSelected="async ()=>{await ShowVersionInfo();}" />
					</MenuItem>
				</MenuBar>
				<div class="vr" />
				<div class="tab_control_main_buttons">
					@{
						IEnumerable<ICommandEntry> commands = CommonCommands;

						if (commands.Any() && ActivePage?.MainCommands.Any() == true)
						{
							commands = commands.Concat(new[] { new CommandEntrySpacer() });
						}
						if (ActivePage?.MainCommands is not null) { commands = commands.Concat(ActivePage.MainCommands); }

						foreach (var item in commands)
						{
							switch (item)
							{
								case CommandEntry itemC:
									<button class="ButtonMini" @onclick="()=>itemC.OnClick()" disabled="@(item.IsEnabled?null:"disabled")" title="@(itemC.Description)">
										@item.Icon
									</button>
									break;
								case CommandEntryFile itemF:
									<div class="FileInputButton ButtonMini" title="@(itemF.Description)">
										@item.Icon
										<Microsoft.AspNetCore.Components.Forms.InputFile OnChange="(e)=>itemF?.OnFileChanged(e)" />
									</div>
									break;
								case CommandEntrySeparator:
									<div class="vr" />
									break;
								case CommandEntrySpacer:
									<div class="spacer" />
									break;
							}
						}
					}
				</div>
			</div>
			<div class="tab_control_top_right">
				<button class="ButtonMini" @onclick="async ()=>{if(leftPanel is null)return;leftPanel.IsOpen=!leftPanel.IsOpen; StateHasChanged();}" title="サイドパネル開閉">
					<span class="material-symbols-outlined">
						@(leftPanel?.IsOpen ?? true ? "left_panel_close" : "left_panel_open")
					</span>
				</button>

				<button class="ButtonMini" @onclick="async ()=>{OutputVisible=!OutputVisible;StateHasChanged();}" title="下部パネル開閉">
					<span class="material-symbols-outlined">
						@(OutputVisible ? "bottom_panel_close" : "bottom_panel_open")
					</span>
				</button>
			</div>
		</div>
		<div class="aozora_editor_main">
			<div class="tab_control_container">

				<div class="tab_control_background" />

				<div class="tab_control_controller">
					@foreach (var item in Pages)
					{
						var cl = item == ActivePage ? "tab_control_controller_tab_active" : "tab_control_controller_tab";

						<div class="@cl" @onmousedown="(e)=>TabClicked(e,item)">
							<p class="tab_control_controller_tab_title">@item.Title</p>
							<button @onclick:preventDefault @onclick:stopPropagation="true" title="タブを閉じる" class="ButtonMini tab_control_controller_tab_close" @onclick="async ()=>{await CloseTab(item);}">
								<span class="material-symbols-outlined">
									close
								</span>
							</button>
						</div>
					}
					<div class="tab_control_controller_add">
						<button class="ButtonMini tab_control_controller_add_button" @onclick="()=>{AddEditorTab();}">
							<span class="material-symbols-outlined">
								add
							</span>
						</button>
					</div>

				</div>

				<div class="tab_control_panel_switch_buttons">
					@if (ActivePage?.PanelSwitchCommands is not null)
					{
						foreach (var item in ActivePage.PanelSwitchCommands)
						{
							switch (item)
							{
								case CommandEntry itemC:
									<button class="ButtonMini" @onclick="()=>itemC.OnClick()" disabled="@(item.IsEnabled?null:"disabled")" title="@(itemC.Description)">
										@item.Icon
									</button>
									break;
								case CommandEntryFile itemF:
									<div class="FileInputButton ButtonMini" title="@(itemF.Description)">
										@item.Icon
										<Microsoft.AspNetCore.Components.Forms.InputFile OnChange="(e)=>itemF?.OnFileChanged(e)" />
									</div>
									break;
								case CommandEntrySeparator:
									<div class="vr" />
									break;
								case CommandEntrySpacer:
									<div class="spacer" />
									break;

							}
						}
					}
				</div>

				<div class="tab_control_body">
					@foreach (var item in Pages)
					{
						bool active = item == ActivePage;
						string additonalClass = active ? "tab_page_container_active" : "hidden";
						<div class="tab_page_container @additonalClass">
							@item.Body
						</div>
					}
					@if (ActivePage is null)
					{
						<div class="tab_page_container" style="display:flex;justify-content:center;align-items:center;text-align:center;font-family:var(--aozora-ui-fonts);background:var(--aozora-tabs-empty-background);">
							<div>
								<p style="font-size:32px;">青空文庫形式エディタ by kurema</p>
								<p>このアプリを気に入られましたら、是非ご支援をご検討いただけますようお願いします。</p>
							</div>
						</div>
					}
				</div>

			</div>
		</div>
		<div class="aozora_editor_bottom">
			<BottomPanel @ref="bottomPanel" />
		</div>
		<div class="aozora_editor_left">
			<LeftPanel @ref="leftPanel" />
		</div>
		<AozoraEditor.Shared.Shared.Dialogs.Dialog @ref="Dialog" />
	</div>
</CascadingValue>

<style>
	/* Global styles. */

	button {
		all: unset;
	}

	.FileInputButton {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		position: relative;
	}

		.FileInputButton input[type=file] {
			position: absolute;
			width: 100%;
			height: 100%;
			/* このやり方はちょっと良くない(コメントアウトすれば分かるが隙間は押せない)。けどほぼ問題なし。 */
			opacity: 0;
			cursor: pointer;
		}


	.ButtonMini {
		background-color: transparent;
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
		border: 0;
		border-radius: 0;
		padding: 2px;
		color: var(--aozora-theme-text-color);
	}

		.ButtonMini:hover {
			background-color: var(--aozora-button-color-hover);
		}

	.vr {
		height: 100%;
		vertical-align: middle;
		width: 2px;
		border-left: solid 1px var(--aozora-vr-color);
	}

	.spacer {
		height: 100%;
		vertical-align: middle;
		width: 0px;
		margin: 0 4px;
	}

	.hidden {
		display: none !important;
	}

</style>

@code {
	[CascadingParameter]
	public Models.IApplicationModel? AppModel { get; set; }

	MenuBar? MenuBar { get; set; }
	BottomPanel? bottomPanel { get; set; }
	LeftPanel? leftPanel { get; set; }
	public Themes.ThemeControl? Theme { get; private set; }

	public bool WarnUTF8 { get; set; } = true;

	public IEnumerable<string> PreviewCssFiles
	{
		get
		{
			yield return PreviewVertical ? "_content/AozoraEditorSharedUI/css/aozora-v.css" : "_content/AozoraEditorSharedUI/css/aozora.css";
			if (PreviewNoMargin) yield return "_content/AozoraEditorSharedUI/css/zero-margin.css";
			if (Theme?.SelectedTheme?.AdditionalCss is not null)
			{
				foreach (var item in Theme.SelectedTheme.AdditionalCss) yield return item;
			}
		}
	}

	public bool PreviewVertical { get; set; } = false;
	public bool PreviewNoMargin { get; set; } = false;

	ICommandEntry[]? _CommonCommands;

	ICommandEntry[] CommonCommands
	{
		get
		{
			var commandOpenFile = CommandEntryFile.FromMaterialSymbolOutlined("file_open", "開く");
			commandOpenFile.FileChanged += async (_, e) =>
		{
	if (e.FileCount != 1 || e.File?.Name == null) return;
	try
	{
		var stream = e.File.OpenReadStream(CommandEntryFile.MaxFileSize);
		await LoadFile(stream, e.File.Name);
	}
	catch
	{
		await ShowDialog("読み込み", "ファイルの読み込みに失敗しました。", Dialogs.Dialog.IconMessage, new Dialogs.DialogOption("了解", true) { Id = "yes" });
	}
		};
			return _CommonCommands ??= new ICommandEntry[]
	{
				commandOpenFile,
	};
		}
	}

	public void HideMenuBar()
	{
		MenuBar?.Hide();
	}

	protected override async Task OnInitializedAsync()
	{
		if (ActivePage is null && Pages.Count > 0) ActivateTab(Pages[0]);
		await base.OnInitializedAsync();
	}

	System.Collections.ObjectModel.ObservableCollection<ITabPage> Pages = new() { new TabPages.EditorTab(Guid.NewGuid(), MonacoEditorAozora.SampleText, "new.txt") };
	public ITabPage? ActivePage { get; set; }

	public async void TabClicked(MouseEventArgs e, ITabPage page)
	{
		//@onclickは左クリックのみ。onmousedownで真ん中ボタンが機能する。
		switch (e.Button)
		{
			case 0:
				ActivateTab(page);
				break;
			case 1:
				await CloseTab(page);
				break;
		}
	}

	public void ActivateTab(ITabPage page)
	{
		ActivePage = page;
		page.Root = this;
		StateHasChanged();
	}

	public ITabPage? SelectTabByGuid(Guid key)
	{
		var target = Pages.FirstOrDefault(a => a.Id == key);
		if (target is null) return null;
		ActivateTab(target);
		return target;
	}

	public async Task CloseTab(ITabPage page)
	{
		switch (page)
		{
			case TabPages.EditorTab et:
				{
					if (et?.Content is null) return;
					if (!(et.OriginalText == await et.Content.GetText()))
					{
						var result = await ShowDialog(et.Content.FileName ?? "確認", "ファイルが変更されています。\n閉じますか？", Dialogs.Dialog.IconMessage, new Dialogs.DialogOption("はい", true) { Id = "yes" }, new Dialogs.DialogOption("キャンセル") { Id = "no" });
						if (result is null) return;
						if (result.Value.Id is string and "no") return;
					}
				}
				break;
		}
		if (!Pages.Contains(page)) return;
		if (ActivePage == page)
		{
			int count = Pages.IndexOf(page);
			count = count == 0 ? 1 : count - 1;
			if (Pages.Count > count) ActivateTab(Pages[count]); else ActivePage = null;
		}
		Pages.Remove(page);
		StateHasChanged();
	}

	public void AddEditorTab()
	{
		AddEditorTab(MonacoEditorAozora.SampleText, "new.txt");
	}


	public void AddEditorTab(string text, string fileName)
	{
		var page = new TabPages.EditorTab(GetNewGuid(), text, fileName) { };
		Pages.Add(page);
		ActivateTab(page);
	}

	private Guid GetNewGuid()
	{
		var id = Guid.NewGuid();
		while (Pages.Any(a => a.Id == id)) { id = Guid.NewGuid(); }
		return id;
	}

	public static RenderFragment GetMaterialSymbolOutlined(string name, string? style = null)
	{
		return @<span class="material-symbols-outlined" style="@(style ?? string.Empty)">@name</span>;
	}

	public void NotifyStateChanged()
	{
		StateHasChanged();
	}

	public async Task OpenInNewTab(string url)
	{
		await jsRuntime.InvokeVoidAsync("open", url, "_blank");
	}

	public void OepnInNewInternalTab(string url, string title)
	{
		var page = new TabPages.IFrameTab(GetNewGuid(), url, title);
		Pages.Add(page);
		ActivateTab(page);
	}

	public async Task ShowVersionInfo()
	{
		await ShowDialog("青空文庫形式エディタ", "作者：kurema\n\nPowered by C# and Blazor.", Dialogs.Dialog.IconMessage, new Dialogs.DialogOption("閉じる", true) { Id = "close" });
	}

	public async Task<Dialogs.DialogOption?> ShowDialog(string title, string text, RenderFragment? icon, params Dialogs.DialogOption[] options)
	{
		if (Dialog is null) return null;
		var result = await Dialog.ShowDialog(title, text, icon, options);
		bottomPanel?.AppendAppMessage($"{text}\n> {result.Text}\n", title);
		return result;
	}

	public async Task LoadFile(Stream stream, string fileName)
	{
		if (stream is null || string.IsNullOrEmpty(fileName)) return;
		var ext = Path.GetExtension(fileName);
		try
		{
			var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			if (ext.Equals(".zip", StringComparison.InvariantCultureIgnoreCase))
			{
				using var zip = new System.IO.Compression.ZipArchive(ms, System.IO.Compression.ZipArchiveMode.Read);
				foreach (var file in zip.Entries.Where(a => System.IO.Path.GetExtension(a.Name)?.Equals(".txt", StringComparison.InvariantCultureIgnoreCase) == true))
				{
					var s2 = file.Open();
					if (s2 is null) continue;
					var text = await LoadText(s2);
					if (text is null) continue;
					var fileNameTemp = Path.GetFileName(file.FullName);
					AddEditorTab(text, fileNameTemp);
				}
			}
			else
			{
				var text = await LoadText(ms);
				if (text is null) throw new Exception();
				var fileNameTemp = Path.GetFileName(fileName);
				AddEditorTab(text, fileNameTemp);
			}
		}
		catch
		{
			throw;
		}
		return;
	}

	private async Task<string?> LoadText(Stream stream)
	{
		try
		{
			var sjis = Aozora.Aozora2Html.ShiftJisExceptionFallback;
			if (sjis is null) throw new Exception();
			using var sr = new StreamReader(stream, sjis);
			return await sr.ReadToEndAsync();
		}
		catch { }
		try
		{
			using var sr = new StreamReader(stream, true);
			return await sr.ReadToEndAsync();
		}
		catch { }
		return null;
	}

	public void ShowDiffTab(string fileName, string original, string modified)
	{
		var page = new TabPages.DiffTab(fileName, original, modified) { Id = GetNewGuid() };
		Pages.Add(page);
		ActivateTab(page);
	}
}

@code {
	public Dialogs.Dialog? Dialog { get; private set; }

	bool _OutputVisible = false;
	public bool OutputVisible { get => _OutputVisible; set { _OutputVisible = value; StateHasChanged(); } }

	public void SetOutputMessage(string message, string title, Guid source)
	{
		bottomPanel?.SetOutputMessage(message, title, source);
		if (!string.IsNullOrWhiteSpace(message) && bottomPanel?.AutoOpen == true) OutputVisible = true;
		StateHasChanged();
	}
}
