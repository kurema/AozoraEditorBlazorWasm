<div class="tab_control_container">
	<div class="tab_control_main_buttons">
		@if (ActivePage?.MainCommands is not null)
		{
			foreach (var item in ActivePage.MainCommands)
			{
				switch (item)
				{
					case CommandEntry itemC:
						<button class="ButtonMini" @onclick="()=>itemC.OnClick()">
							@item.Icon
						</button>
						break;
					case CommandEntryFile itemF:
						<div class="FileInputButton ButtonMini">
							@item.Icon
							<Microsoft.AspNetCore.Components.Forms.InputFile OnChange="(e)=>itemF?.OnFileChanged(e)" />
						</div>
						break;
				}
			}
		}
	</div>

	<div class="tab_control_controller">
		@foreach (var item in Pages)
		{
			<button @onclick="()=>ActivateTab(item)">
				@item.Title
			</button>
		}
	</div>

	<div class="tab_control_panel_switch_buttons">
		@if (ActivePage?.PanelSwitchCommands is not null)
		{
			foreach (var item in ActivePage.PanelSwitchCommands)
			{
				switch (item)
				{
					case CommandEntry itemC:
						<button class="ButtonMini" @onclick="()=>itemC.OnClick()">
							@item.Icon
						</button>
						break;
					case CommandEntryFile itemF:
						<div class="FileInputButton ButtonMini">
							@item.Icon
							<Microsoft.AspNetCore.Components.Forms.InputFile OnChange="(e)=>itemF?.OnFileChanged(e)" />
						</div>
						break;
				}
			}
		}
	</div>

	<div class="tab_control_body">
		@foreach (var item in Pages)
		{
			bool active = item == ActivePage;
			string additonalClass = active ? "tab_page_container_active" : "tab_page_container_hidden";
			<div class="tab_page_container @additonalClass">
				@item.Body
			</div>
		}
	</div>
</div>

<style>
	.tab_control_container {
		display: grid;
		grid-template-rows: auto auto 1fr;
		grid-template-columns: 1fr auto;
		flex: 1 0 0;
	}

	.tab_control_controller {
		grid-row: 2/3;
		grid-column: 1/2;
		min-width: 0;
		min-height: 0;
	}

	.tab_control_panel_switch_buttons {
		grid-row: 2/3;
		grid-column: 2/3;
		min-width: 0;
		min-height: 0;
	}

	.tab_control_main_buttons {
		grid-row: 1/2;
		grid-column: 1/3;
		min-width: 0;
		min-height: 0;
	}

	.tab_control_body {
		grid-row: 3/4;
		grid-column: 1/3;
		min-width: 0;
		min-height: 0;
		display: flex;
	}

	.tab_page_container {
		display: flex;
		flex: 1 0 0;
	}

	.tab_page_container_active {
	}

	.tab_page_container_hidden {
		display: none;
	}


	.ButtonMini {
		background-color: transparent;
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
		border: 0;
		border-radius: 0;
	}

		.ButtonMini:hover {
			background-color: #7F7F7F22;
		}

	.FileInputButton {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		position: relative;
	}

		.FileInputButton input[type=file] {
			position: absolute;
			width: 100%;
			height: 100%;
			/* このやり方はちょっと良くない(コメントアウトすれば分かるが隙間は押せない)。けどほぼ問題なし。 */
			opacity: 0;
			cursor: pointer;
		}
</style>

@code {

	protected override async Task OnInitializedAsync()
	{
		if (ActivePage is null && Pages.Count > 0) ActivateTab(Pages[0]);
		await base.OnInitializedAsync();
	}

	System.Collections.ObjectModel.ObservableCollection<ITabPage> Pages = new() { new TabPages.EditorTab() };
	public ITabPage? ActivePage { get; set; }

	public void ActivateTab(ITabPage page)
	{
		ActivePage = page;
		page.Parent = this;
		StateHasChanged();
	}

	public static RenderFragment GetMaterialSymbolOutlined(string name)
	{
		return @<span class="material-symbols-outlined">@name</span>;
	}

	public void NotifyStateChanged()
	{
		StateHasChanged();
	}
}
