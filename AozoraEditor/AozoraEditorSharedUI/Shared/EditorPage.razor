@inject IJSRuntime JSRuntime;

<SplitPage @ref="splitPage">
	<Left><MonacoEditorAozora @ref="editor" /></Left>
	<Right><SubPanel PreviewDocument="@PreviewHtml" /></Right>
</SplitPage>

@code {
	SplitPage? splitPage { get; set; }

	public SplitPage.DisplayModes? DisplayMode
	{
		get => splitPage?.DisplayMode;
		set
		{
			if (splitPage is null) return;
			if (value is null) return;
			splitPage.DisplayMode = value.Value;
		}
	}

	private string _FileName = "new.txt";
	public string FileName
	{
		get => _FileName;
		set { _FileName = value; TitleChanged?.Invoke(this, new()); }
	}

	private MonacoEditorAozora? editor;

	public string PreviewHtml { get; set; } = @"<html><link href=""_content/AozoraEditorSharedUI/emoji/MaterialSymbols.css"" rel=""stylesheet"" /><body>プレビューの作成には<span class=""material-symbols-outlined"">play_arrow</span>を押してください。</body></html>";

	public void SubPanelSwitchToPreview()
	{
		if (splitPage is null) return;
		splitPage.DisplayMode = SplitPage.DisplayModes.Separated;
		StateHasChanged();
	}

	public async Task ShowPreview()
	{
		if (splitPage is null) return;
		PreviewHtml = "<html><body><p>プレビュー作成中です<br />この間、UIがフリーズすることがあります。</p></body></html>";
		splitPage.DisplayMode = SplitPage.DisplayModes.Separated;
		StateHasChanged();
		if (editor is null)
		{
			Console.WriteLine("Null!");
			return;
		}
		if (editor?.Content is null) return;
		var text = await editor.Content.GetValue();
		var js = new Aozora.JstreamString(text);
		var output = new Aozora.Helpers.OutputString();
		var message = new Aozora.Helpers.OutputString();
		var aozora = new Aozora.Aozora2Html(js, output, warnChannel: message, css_files: new[] { "_content/AozoraEditorSharedUI/aozora.css" })
			{
				UseJisx0213Accent = true,
				UseJisx0214EmbedGaiji = true,
				UseUnicodeEmbedGaiji = true,
			}; ;
		try
		{
			await Task.Run(() => aozora.Process());
			PreviewHtml = output.ToString();
			if (Parent is not null) Parent.SetMessage(message.ToString());
		}
		catch
		{
			if (Parent is not null) Parent.SetMessage(message.ToString());
			PreviewHtml = "<html><body><p>プレビュー作成に失敗しました。</p></body></html>";
		}
		StateHasChanged();
	}


	public async Task LoadFile(Stream stream, string fileName)
	{
		if (stream is null || string.IsNullOrEmpty(fileName)) return;
		var ext = Path.GetExtension(fileName);
		try
		{
			var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			if (ext.Equals(".zip", StringComparison.InvariantCultureIgnoreCase))
			{
				using var zip = new System.IO.Compression.ZipArchive(ms, System.IO.Compression.ZipArchiveMode.Read);
				var f = zip.Entries.FirstOrDefault(a => System.IO.Path.GetExtension(a.Name)?.Equals(".txt", StringComparison.InvariantCultureIgnoreCase) == true);
				if (f is null) goto fail;
				var s2 = f.Open();
				if (s2 is null) goto fail;
				var text = await LoadText(s2);
				if (text is null) goto fail;
				if (editor?.Content is null) goto fail;
				await editor.Content.SetValue(text);
				FileName = Path.GetFileName(f.FullName);
			}
			else
			{
				var text = await LoadText(ms);
				if (text is null) goto fail;
				if (editor?.Content is null) goto fail;
				await editor.Content.SetValue(text);
				FileName = Path.GetFileName(fileName);
			}
		}
		catch
		{
			throw;
		}
		return;
	fail:
		throw new FileLoadException("ファイルの読み込みに失敗しました");
	}

	private async Task<string?> LoadText(Stream stream)
	{
		try
		{
			var sjis = System.Text.CodePagesEncodingProvider.Instance.GetEncoding("shift-jis", new System.Text.EncoderExceptionFallback(), new System.Text.DecoderExceptionFallback());
			if (sjis is null) throw new Exception();
			using var sr = new StreamReader(stream, sjis);
			return await sr.ReadToEndAsync();
		}
		catch { }
		try
		{
			using var sr = new StreamReader(stream, true);
			return await sr.ReadToEndAsync();
		}
		catch { }
		return null;
	}

	public async Task DownloadText()
	{
		using var ms = new MemoryStream();
		if (editor?.Content is null) goto fail;
		var text = await editor.Content.GetValue();

		async Task saveMs(Stream ms)
		{
			ms.Seek(0, SeekOrigin.Begin);
			using var streamRef = new DotNetStreamReference(ms);
			await JSRuntime.InvokeVoidAsync("window.DownloadFileFromStream", FileName, streamRef);
		}

		try
		{
			var sjis = System.Text.CodePagesEncodingProvider.Instance.GetEncoding("shift-jis", new System.Text.EncoderExceptionFallback(), new System.Text.DecoderExceptionFallback());
			if (sjis is null) throw new Exception();
			var sw = new StreamWriter(ms, sjis);
			await sw.WriteAsync(text);
			await sw.FlushAsync();
			await saveMs(ms);
			sw.Close();
			//await sw.DisposeAsync();
		}
		catch (Exception e2)
		{
			Console.WriteLine(e2);
			try
			{
				var sw = new StreamWriter(ms, System.Text.Encoding.UTF8);
				await sw.WriteAsync(text);
				await sw.FlushAsync();
				await saveMs(ms);
				sw.Close();
			}
			catch (Exception e)
			{
				Console.WriteLine(e);
				goto fail;
			}
		}

		return;
	fail:
		Console.WriteLine("Saving file failed.");
		return;
	}

	public event EventHandler? TitleChanged;
	public TabControl? Parent { get; set; }
}
