@inject IJSRuntime JSRuntime;

<SplitPage @ref="splitPage">
	<Left><MonacoEditorAozora @ref="editor" OriginalText="@OriginalText" /></Left>
	<Right><SubPanel PreviewDocument="@PreviewHtml" Selected="@Selected" /></Right>
</SplitPage>

@code {
	[CascadingParameter]
	public Guid Id { get; set; }

	[Parameter]
	public string OriginalText { get; set; } = string.Empty;

	public SubPanel.SubPanelContents Selected { get; set; }

	SplitPage? splitPage { get; set; }

	public SplitPage.DisplayModes? DisplayMode
	{
		get => splitPage?.DisplayMode;
		set
		{
			if (splitPage is null) return;
			if (value is null) return;
			splitPage.DisplayMode = value.Value;
		}
	}

	private string _FileName = "new.txt";
	public string FileName
	{
		get => _FileName;
		set { _FileName = value; TitleChanged?.Invoke(this, new()); }
	}

	private MonacoEditorAozora? editor;

	public string PreviewHtml { get; set; } = $@"<html><head><link href=""_content/AozoraEditorSharedUI/emoji/MaterialSymbols.css"" rel=""stylesheet"" /><link href=""_content/AozoraEditorSharedUI/css/preview-default.css"" rel=""stylesheet"" /></head><body><div class=""top_message"">プレビューの作成には<span class=""material-symbols-outlined"" style=""vertical-align:middle;"">play_arrow</span>を押してください。</div></body></html>";

	public void SubPanelSwitchTo(SubPanel.SubPanelContents content)
	{
		if (splitPage is null) return;
		splitPage.DisplayMode = SplitPage.DisplayModes.Separated;
		Selected = content;
		StateHasChanged();
	}

	public async Task ShowPreview()
	{
		if (splitPage is null) return;
		PreviewHtml = "<html><body><p>プレビュー作成中です<br />この間、UIがフリーズすることがあります。</p></body></html>";
		splitPage.DisplayMode = SplitPage.DisplayModes.Separated;
		Selected = SubPanel.SubPanelContents.Iframe;
		StateHasChanged();
		if (editor is null)
		{
			Console.WriteLine("Null!");
			return;
		}
		if (editor?.Content is null) return;
		var text = await editor.Content.GetValue();
		var js = new Aozora.JstreamString(text);
		var output = new Aozora.Helpers.OutputString();
		var message = new Aozora.Helpers.OutputString();
		var aozora = new Aozora.Aozora2Html(js, output, warnChannel: message, css_files: Root?.PreviewCssFiles?.ToArray() ?? new[] { "_content/AozoraEditorSharedUI/css/aozora.css" })
			{
				UseJisx0213Accent = true,
				UseJisx0214EmbedGaiji = true,
				UseUnicodeEmbedGaiji = true,
				Template = new Aozora.Helpers.TemplateBasic(),
				ExtendedOption = new()
				{
					UseGeneralImage = true,
					WarnUnknownCommand = true,
				}
			};
		try
		{
			await Task.Run(() => aozora.Process());
			PreviewHtml = output.ToString();
			if (Root is not null && editor is not null) Root.SetOutputMessage(message.ToString(), FileName, editor.Id);
		}
		catch
		{
			if (Root is not null && editor is not null) Root.SetOutputMessage(message.ToString(), FileName, editor.Id);
			PreviewHtml = "<html><body><p>プレビュー作成に失敗しました。</p></body></html>";
		}
		StateHasChanged();
	}

	public async Task<string?> GetText()
	{
		if (editor?.Content is null) return null;
		return await editor.Content.GetValue();
	}

	public async Task DownloadText()
	{
		//フォルダを開く：FireFox非対応。
		//https://developer.mozilla.org/docs/Web/API/Window/showDirectoryPicker
		//ファイル保存ダイアログを開く：FireFox他非対応。
		//https://developer.mozilla.org/docs/Web/API/Window/showSaveFilePicker

		using var ms = new MemoryStream();
		if (editor?.Content is null) goto fail;
		var text = await editor.Content.GetValue();

		async Task saveMs(Stream ms)
		{
			ms.Seek(0, SeekOrigin.Begin);
			using var streamRef = new DotNetStreamReference(ms);
			await JSRuntime.InvokeVoidAsync("window.DownloadFileFromStream", FileName, streamRef);
		}

		try
		{
			var sjis = System.Text.CodePagesEncodingProvider.Instance.GetEncoding("shift-jis", new System.Text.EncoderExceptionFallback(), new System.Text.DecoderExceptionFallback());
			if (sjis is null) throw new Exception();
			var sw = new StreamWriter(ms, sjis);
			await sw.WriteAsync(text);
			await sw.FlushAsync();
			await saveMs(ms);
			sw.Close();
			//await sw.DisposeAsync();
		}
		catch (Exception e2)
		{
			Console.WriteLine(e2);
			try
			{
				var sw = new StreamWriter(ms, System.Text.Encoding.UTF8);
				await sw.WriteAsync(text);
				await sw.FlushAsync();
				await saveMs(ms);
				sw.Close();
			}
			catch (Exception e)
			{
				Console.WriteLine(e);
				goto fail;
			}
		}

		return;
	fail:
		if (Root?.Dialog is not null) await Root.Dialog.ShowDialog("保存", "ファイルのダウンロードに失敗しました", TabControl.GetMaterialSymbolOutlined("error"), new Dialogs.DialogOption() { Id = "ok", Text = "了解", IsHighlighted = true });
		return;
	}

	public event EventHandler? TitleChanged;

	public void SetPosition(Position position)
	{
		editor?.Content?.SetPosition(position, string.Empty);
		editor?.Content?.RevealLineInCenter(position.LineNumber);
	}

	[CascadingParameter(Name = nameof(Root))]
	public TabControl? Root { get; set; }
}
