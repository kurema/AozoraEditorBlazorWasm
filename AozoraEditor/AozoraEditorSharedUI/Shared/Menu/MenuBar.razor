@implements IMenuParent
@inject IJSRuntime JSRuntime;

<div class="menubar" @onclick:preventDefault @onclick:stopPropagation="true" @onclick="()=>{}" @ref="ElementBox">
	@{
		int i = 0;
	}
	@foreach (var item in ChildMenus)
	{
		i++;
		<div class="menubar_menu_button" @onclick="async ()=>{await ItemClicked(item);}" @ref="@item.ElementHeader" @onmouseover="async ()=>{await MouseOverItem(item);}">@item.Title</div>
	}
</div>

<style>
	.menubar {
		display: flex;
		flex-shrink: 1;
		align-items: center;
		box-sizing: border-box;
		height: 100%;
		overflow: hidden;
		/*border:solid 1px rgba(0,0,0,0.2);*/

		margin: 2px 4px;
		font-size: 13px;
	}

		.menubar > .menubar_menu_button {
			padding: 0 8px;
			border-radius: 5px;
			cursor: default;
			font-family: Segoe WPC,Segoe UI,sans-serif;
			user-select: none;
		}

			.menubar > .menubar_menu_button:hover {
				background-color: #7F7F7F22;
			}
</style>

<CascadingValue Value="this">
	@ChildContent
</CascadingValue>

@code {
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	public ElementReference? ElementBox { get; set; }

	public int ZIndex => 256;

	System.Collections.ObjectModel.ObservableCollection<IMenuItem> ChildMenus { get; } = new();

	public void AddItem(IMenuItem menuItem)
	{
		ChildMenus.Add(menuItem);
		StateHasChanged();
	}

	public void Hide()
	{
		foreach (var item in ChildMenus)
		{
			item.Hide();
		}
		StateHasChanged();
	}

	public MenuPosition ChildPosition => MenuPosition.Bottom;

	public async Task ItemClicked(IMenuItem item)
	{
		if (item.HasChild && item.IsChildrenVisible)
		{
			Hide();
			StateHasChanged();
			return;
		}
		Hide();
		await item.InvokeAsync();
		StateHasChanged();
		return;
	}

	public async Task MouseOverItem(IMenuItem item)
	{
		if (!ChildMenus.Any(a => a.IsChildrenVisible)) return;
		if (item.IsChildrenVisible) return;
		if (!item.HasChild) return;
		Hide();
		await item.ShowAsync();
		StateHasChanged();
	}

	public void NotifyStateHasChanged() => StateHasChanged();
}
