@implements IMenuParent
@inject IJSRuntime JSRuntime;

<div class="menubar" @onclick:preventDefault @onclick:stopPropagation="true" @onclick="()=>{}" @ref="ElementBox">
	@{
		int i = 0;
	}
	@foreach (var item in ChildMenus)
	{
		i++;
		<div class="menubar_menu_button" @onclick="async ()=>{await ItemClicked(item);}" @ref="@item.ElementHeader" @onmouseover="async ()=>{await MouseOverItem(item);}">@item.Title</div>
	}
</div>

<CascadingValue Value="this">
	@ChildContent
</CascadingValue>

@code {
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	public ElementReference? ElementBox { get; set; }

	public int ZIndex => 256;

	System.Collections.ObjectModel.ObservableCollection<IMenuItem> ChildMenus { get; } = new();

	public void AddItem(IMenuItem menuItem)
	{
		ChildMenus.Add(menuItem);
		StateHasChanged();
	}

	public void Hide()
	{
		foreach (var item in ChildMenus)
		{
			item.Hide();
		}
		StateHasChanged();
	}

	public MenuPosition ChildPosition => MenuPosition.Bottom;

	public async Task ItemClicked(IMenuItem item)
	{
		if (item.HasChild && item.IsChildrenVisible)
		{
			Hide();
			StateHasChanged();
			return;
		}
		Hide();
		await item.InvokeAsync();
		StateHasChanged();
		return;
	}

	public async Task MouseOverItem(IMenuItem item)
	{
		if (!ChildMenus.Any(a => a.IsChildrenVisible)) return;
		if (item.IsChildrenVisible) return;
		if (!item.HasChild) return;
		Hide();
		await item.ShowAsync();
		StateHasChanged();
	}

	public void NotifyStateHasChanged() => StateHasChanged();
}
