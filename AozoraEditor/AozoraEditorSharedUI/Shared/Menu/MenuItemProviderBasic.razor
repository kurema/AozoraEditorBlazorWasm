@implements IMenuItemProvider
@implements IMenuParent
@inject IJSRuntime JSRuntime;

@code {
	[CascadingParameter(Name = nameof(Parent))]
	public IMenuParent? Parent { get; set; }


	protected override void OnInitialized()
	{
		if (Parent is null) throw new ArgumentNullException(nameof(Parent), "MenuItem requires the parent.");
		Parent.AddItem(this);
		base.OnInitialized();
	}

	public static IEnumerable<IMenuItemSingle> GetFlatMenuItems(IEnumerable<IMenuItem>? items)
	{
		return GetFlatMenuItemsTuple(items).Select(a => a.Body);
	}

	public static IEnumerable<(IMenuItemProvider? Provider, IMenuItemSingle Body)> GetFlatMenuItemsTuple(IEnumerable<IMenuItem>? items)
	{
		if (items is null) yield break;
		foreach (var item in items)
		{
			switch (item)
			{
				case IMenuItemSingle single: yield return (null, single); break;
				case IMenuItemProvider p: foreach (var item2 in p.Items) yield return (p, item2); break;
			}
		}
	}

	[Parameter]
	public Func<IEnumerable<IMenuItemSingle>>? Provider { get; set; }

	public IEnumerable<IMenuItemSingle> Items
	{
		get
		{
			var result = Provider?.Invoke();
			if (result is null) return Array.Empty<IMenuItemSingle>();
			foreach (var item in result)
			{
				item.ParentProvider = this;
#if DEBUG
			if (item.HasChild) throw new Exception($"{nameof(IMenuItemSingleBasic)} can't handle {nameof(IMenuItem)} with child.");
#endif
			}
			return result.Select(a => (IMenuItemSingle)a).ToArray();
		}
	}

	System.Collections.ObjectModel.ObservableCollection<IMenuItem> ChildMenus { get; } = new();

	public void AddItem(IMenuItem menuItem) { ChildMenus.Add(menuItem); /* menuItem.Parent = Parent; */ }
	public int ZIndex => 0;
	public void Hide() { foreach (var item in this.ChildMenus) (item as IMenuParent)?.Hide(); }
	public ElementReference? ElementBox => null;
	public MenuPosition ChildPosition => MenuPosition.Right;
	public void NotifyStateHasChanged() { }

}
