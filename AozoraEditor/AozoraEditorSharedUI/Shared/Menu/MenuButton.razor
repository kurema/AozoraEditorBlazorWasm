@implements IMenuParent
@inject IJSRuntime JSRuntime;

<button class="menubutton" @onclick:preventDefault @onclick:stopPropagation="true" @ref="ElementBox" @onclick="_=>ItemClickedAsync()">
	@(string.IsNullOrEmpty(Header) && !string.IsNullOrEmpty(HeaderMaterial) ? FullEditor.GetMaterialSymbolOutlined(HeaderMaterial) : @<text>@Header</text>)
</button>

<CascadingValue Value="this">
	@ChildContent
</CascadingValue>

@code {
	[Parameter]
	public string Header { get; set; } = string.Empty;

	[Parameter]
	public string? HeaderMaterial { get; set; }

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	public ElementReference? ElementBox { get; set; }

	public int ZIndex => 256;

	System.Collections.ObjectModel.ObservableCollection<IMenuItem> ChildMenus { get; } = new();

	//[Parameter]
	//public EventCallback<EventArgs> OnOpened { get; set; }

	[CascadingParameter(Name = nameof(Root))]
	public FullEditor? Root { get; set; }

	public void AddItem(IMenuItem menuItem)
	{
		ChildMenus.Add(menuItem);
		StateHasChanged();
	}

	public void Hide()
	{
		CurrentMenu?.Hide();
		foreach (var item in ChildMenus)
		{
			if (CurrentMenu == item) continue;
			(item as IMenuItemSingle)?.Hide();
		}
		if (Root is not null) Root.CurrentMenu = null;
	}

	[Parameter]
	public MenuPosition ChildPosition { get; set; } = MenuPosition.Bottom;

	IMenuItemSingleBasic? CurrentMenu;

	async Task ItemClickedAsync()
	{
		var item = MenuItemProvider.GetFlatMenuItems(ChildMenus)?.FirstOrDefault();
		if (item is not IMenuItemSingleBasic itemB) return;
		CurrentMenu = itemB;
		if (itemB.IsChildrenVisible)
		{
			if (Root is not null) Root.CurrentMenu = null;
			itemB.Hide();
		}
		else
		{
			Root?.HideMenuBar();
			//await OnOpened.InvokeAsync();
			if (Root is not null) Root.CurrentMenu = this;
			await itemB.InvokeAsync();
		}
		//StateHasChanged();
		return;
	}

	public void NotifyStateHasChanged() => StateHasChanged();
}
