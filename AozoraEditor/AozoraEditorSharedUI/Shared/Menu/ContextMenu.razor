@implements IMenuParent
@inject IJSRuntime JSRuntime;

<CascadingValue Name="Parent" Value="this">
	@ChildContent
</CascadingValue>

@code {
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	public int ZIndex => 256;

	System.Collections.ObjectModel.ObservableCollection<IMenuItem> ChildMenus { get; } = new();

	public void AddItem(IMenuItem menuItem)
	{
		ChildMenus.Add(menuItem);
		StateHasChanged();
	}

	public void Hide()
	{
		foreach (var item in ChildMenus)
		{
			(item as IMenuItemSingle)?.Hide();
		}
		StateHasChanged();
	}

	public async Task ShowAsync(double x,double y)
	{
		var item = ChildMenus?.FirstOrDefault();
		if (item is not IMenuItemSingleBasic itemB) return;
		if (itemB.IsChildrenVisible)
		{
			if (Root is not null) Root.CurrentMenu = null;
			itemB.Hide();
		}
		else
		{
			Root?.HideMenuBar();
			if (Root is not null) Root.CurrentMenu = this;
			await itemB.ShowAsync(x, y);
		}
		return;
	}

	public ElementReference? ElementBox { get; set; }

	public MenuPosition ChildPosition => MenuPosition.ClickedPositionBottomRight;

	//[Parameter]
	//public double ClickedPositionX { get; set; }

	//[Parameter]
	//public double ClickedPositionY { get; set; }

	public void NotifyStateHasChanged() => StateHasChanged();

	[CascadingParameter(Name = nameof(Root))]
	public FullEditor? Root { get; set; }
}
