<div class="left_panel_container">
	<div class="left_panel_tabs_container">
		<ul class="left_panel_tabs_items">
			@foreach (var item in tabEntries)
			{
				<li class="left_panel_tabs_item @(item == selectedTab && IsOpen?"left_panel_tabs_item_selected":"")" @onclick="()=>{SelectTab(item);}">@(item.icon)</li>
			}
		</ul>
	</div>
	@if (IsOpen)
	{
		<div class="left_panel_body">
			@switch (selectedTab.Key)
			{
				case "Files":
					<span>ファイル</span>
					break;
				case "Search":
					<span>検索</span>
					break;
				case "Notes":
					<span>メモ</span>
					break;
				default:
					break;
			}
		</div>
	}
</div>

@code {


	System.Collections.ObjectModel.ObservableCollection<TabEntry> tabEntries { get; }

	record TabEntry(string Description, string Key, RenderFragment icon) { }

	TabEntry _selectedTab;
	TabEntry selectedTab { get => _selectedTab; set { _selectedTab = value; StateHasChanged(); } }

	bool _IsOpen = false;
	public bool IsOpen { get => _IsOpen; set { _IsOpen = value; StateHasChanged(); Parent?.NotifyStateChanged(); } }

	[CascadingParameter]
	public TabControl? Parent { get; private set; }


	void SelectTab(TabEntry tab)
	{
		if (tab == selectedTab)
		{
			_IsOpen = !IsOpen;
			StateHasChanged();
			return;
		}
		_selectedTab = tab;
		_IsOpen = true;
		StateHasChanged();
	}

	public LeftPanel()
	{
		tabEntries = new()
		{
			new TabEntry("ファイル","Files",TabControl.GetMaterialSymbolOutlined("folder")),
			new TabEntry("検索","Search",TabControl.GetMaterialSymbolOutlined("search")),
			new TabEntry("メモ","Notes",TabControl.GetMaterialSymbolOutlined("note")),
		};
		_selectedTab = tabEntries[0];
	}
}
