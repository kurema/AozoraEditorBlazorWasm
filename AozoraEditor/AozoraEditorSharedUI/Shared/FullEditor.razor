@inject IJSRuntime jsRuntime
@using AozoraEditor.Shared.Shared.Menu

<AozoraEditor.Shared.Shared.Themes.ThemeControl @ref="Theme" />
<Microsoft.AspNetCore.Components.Routing.NavigationLock OnBeforeInternalNavigation="BeforeInternalNavigation" ConfirmExternalNavigation="@ConfirmExternalNavigation" />

<CascadingValue Value="this" Name="Root">
	<div class="aozora_editor_top @(OutputVisible?"aozoa_editor_top_show_output ":"")" @onclick="()=>{HideMenuBar();}">
		<div class="tab_control_top_container">
			<div class="tab_control_top_left">
				<MenuBar @ref="MenuBar">
					<MenuItem Title="ファイル">
						<MenuItem Title="新規作成" IconMaterialSymbols="note_add">
							<MenuItem Title="青空文庫形式テキスト" OnHeaderSelected="()=>{AddEditorTab();}" IconMaterialSymbols="book" />
							<MenuItem Title="Markdownドキュメント" OnHeaderSelected="()=>{AddEditorTabMarkdown();}" IconMaterialSymbols="draft" />
						</MenuItem>
						<MenuItem Title="開く" />
					</MenuItem>
					<MenuItem Title="設定">
						<MenuItem Title="テーマ">
							@if (Theme is not null)
							{
								//この書き方はTheme.ThemeEntriesが増える場合は破綻する点に注意！
								foreach (var theme in Theme.ThemeEntries)
								{
									<MenuItemCheckbox Title="@(theme.Title)" IsChecked="@(theme == Theme.SelectedTheme)" Checked="()=>{Theme.SelectedTheme=theme;}" />
								}
							}
						</MenuItem>
						<MenuItem Title="プレビュー">
							<MenuItemCheckbox Title="縦書き" IsChecked="PreviewVertical" Checked="()=>{PreviewVertical=true;}" UnChecked="()=>{PreviewVertical=false;}" />
							<MenuItemCheckbox Title="余白なし" IsChecked="PreviewNoMargin" Checked="()=>{PreviewNoMargin=true;}" UnChecked="()=>{PreviewNoMargin=false;}" />
						</MenuItem>
						<MenuItem Title="通知">
							<MenuItemCheckbox Title="UTF-8で保存した場合の通知" IsChecked="WarnUTF8" Checked="()=>{WarnUTF8=true;}" UnChecked="()=>{WarnUTF8=false;}" />
						</MenuItem>
					</MenuItem>
					<MenuItem Title="ヘルプ">
						<MenuItem Title="青空文庫">
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="青空文庫" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://www.aozora.gr.jp/");})" />
							<MenuSeparater />
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="作業マニュアル" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://www.aozora.gr.jp/aozora-manual/");})" />
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="注記一覧" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://www.aozora.gr.jp/annotation/");})" />
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="耕作員手帳" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://www.aozora.gr.jp/guide/techo.html");})" />
						</MenuItem>
						<MenuItem Title="アプリについて">
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="プロジェクトページ" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://github.com/kurema/AozoraEditorBlazorWasm");})" />
							<MenuItem IconMaterialSymbols="open_in_new_down" Title="ライセンス" OnHeaderSelected="@(async ()=>{await OpenInNewTab("https://github.com/kurema/AozoraEditorBlazorWasm/blob/master/LICENSE");})" />
							<MenuItem Title="サードパーティーライセンス" OnHeaderSelected="@(async ()=>{OepnInNewInternalTab("_content/AozoraEditorSharedUI/thirdparty.xml","サードパーティー");})" />
						</MenuItem>
						<MenuSeparater />
						<MenuItem Title="バージョン情報" IconMaterialSymbols="info" OnHeaderSelected="async ()=>{await ShowVersionInfo();}" />
					</MenuItem>
				</MenuBar>
				<div class="vr" />
				<div class="tab_control_main_buttons">
					@{
						IEnumerable<ICommandEntry> commands = CommonCommands;

						if (commands.Any() && ActivePage?.MainCommands.Any() == true)
						{
							commands = commands.Concat(new[] { new CommandEntrySpacer() });
						}
						if (ActivePage?.MainCommands is not null) { commands = commands.Concat(ActivePage.MainCommands); }

						foreach (var item in commands)
						{
							switch (item)
							{
								case CommandEntry itemC:
									<button class="ButtonMini" @onclick="()=>itemC.OnClick()" disabled="@(item.IsEnabled?null:"disabled")" title="@(itemC.Description)">
										@item.Icon
									</button>
									break;
								case CommandEntryToggle itemT:
									<button class="ButtonMini" @onclick="()=>itemT.OnClick()" disabled="@(item.IsEnabled?null:"disabled")" title="@(itemT.Description)">
										@if (itemT.IsChecked)
										{
											@itemT.Icon
										}
										else
										{
											@itemT.IconUnchecked
										}
									</button>
									//itemT.StateHasChangedRequested += (_, _) => StateHasChanged();
									break;
								case CommandEntryFile itemF:
									<div class="FileInputButton ButtonMini" title="@(itemF.Description)">
										@item.Icon
										<Microsoft.AspNetCore.Components.Forms.InputFile OnChange="(e)=>itemF?.OnFileChanged(e)" />
									</div>
									break;
								case CommandEntrySeparator:
									<div class="vr" />
									break;
								case CommandEntrySpacer:
									<div class="spacer" />
									break;
							}
						}
					}
				</div>
			</div>
			<div class="tab_control_top_right">
				<button class="ButtonMini" @onclick="async ()=>{if(leftPanel is null)return;leftPanel.IsOpen=!leftPanel.IsOpen; StateHasChanged();}" title="サイドパネル開閉">
					<span class="material-symbols-outlined">
						@(leftPanel?.IsOpen ?? true ? "left_panel_close" : "left_panel_open")
					</span>
				</button>

				<button class="ButtonMini" @onclick="async ()=>{OutputVisible=!OutputVisible;StateHasChanged();}" title="下部パネル開閉">
					<span class="material-symbols-outlined">
						@(OutputVisible ? "bottom_panel_close" : "bottom_panel_open")
					</span>
				</button>
			</div>
		</div>
		<div class="aozora_editor_main">
			<div class="tab_control_container">

				<div class="tab_control_background" />

				<div class="tab_control_controller">
					@foreach (var (item, _) in Pages)
					{
						var page = item;
						var cl = page == ActivePage ? "tab_control_controller_tab_active" : "tab_control_controller_tab";
						var id = page.Id;

						<div class="@cl" @onmousedown="(e)=>TabClicked(e,page)" data-tab-id="@id">
							<p class="tab_control_controller_tab_title">@(page.Title)</p>
							@*<p class="tab_control_controller_tab_title">@(page.Id)</p>*@
							<button @onclick:preventDefault @onclick:stopPropagation="true" title="タブを閉じる" class="ButtonMini tab_control_controller_tab_close" @onclick="async ()=>{await CloseTab(id);}">
								<span class="material-symbols-outlined">
									close
								</span>
							</button>
						</div>
					}
					<div class="tab_control_controller_add">
						<button class="ButtonMini tab_control_controller_add_button" @onclick="()=>{AddEditorTab();}">
							<span class="material-symbols-outlined">
								add
							</span>
						</button>
					</div>

				</div>

				<div class="tab_control_panel_switch_buttons">
					@if (ActivePage?.PanelSwitchCommands is not null)
					{
						foreach (var item in ActivePage.PanelSwitchCommands)
						{
							switch (item)
							{
								case CommandEntry itemC:
									<button class="ButtonMini" @onclick="()=>itemC.OnClick()" disabled="@(item.IsEnabled?null:"disabled")" title="@(itemC.Description)">
										@item.Icon
									</button>
									break;
								case CommandEntryToggle itemT:
									<button class="ButtonMini" @onclick="()=>itemT.OnClick()" disabled="@(item.IsEnabled?null:"disabled")" title="@(itemT.Description)">
										@if (itemT.IsChecked)
										{
											@itemT.Icon
										}
										else
										{
											@itemT.IconUnchecked
										}
									</button>
									@*itemT.StateHasChangedRequested += (_, _) => StateHasChanged();*@
									break;
								case CommandEntryFile itemF:
									<div class="FileInputButton ButtonMini" title="@(itemF.Description)">
										@item.Icon
										<Microsoft.AspNetCore.Components.Forms.InputFile OnChange="(e)=>itemF?.OnFileChanged(e)" />
									</div>
									break;
								case CommandEntrySeparator:
									<div class="vr" />
									break;
								case CommandEntrySpacer:
									<div class="spacer" />
									break;

							}
						}
					}
				</div>

				<div class="tab_control_body">
					@{
						RenderFragment GetBody() => builder =>
						{
							//シークエンス番号を固定することで差分が明確になる。その結果、タブの挙動がマトモになる！
							//これに至るまで5日くらい掛かってる。
							//PagesHiddenやrazor記法の場合など、削除前のコードなどは以下を参照してください。
							//https://github.com/kurema/AozoraEditorBlazorWasm/blob/2a187f617e43211e2f2a3dc44940e2c4062b1e5b/AozoraEditor/AozoraEditorSharedUI/Shared/TabControl.razor#L215
							foreach (var (item, s) in Pages)
							{
								int seq = s * 2;
								//if (item != ActivePage) continue;//これはもちろんダメ。
								builder.OpenElement(seq, "div");
								builder.AddAttribute(seq + 1, "style", item == ActivePage ? "display: flex;flex: 1 0 0;" : "display: none;flex: 1 0 0;");
								item.Body.Invoke(builder);
								builder.CloseElement();
							}
						};
						@GetBody()
					}
					@if (ActivePage is null)
					{
						<div class="tab_page_container" style="display:flex;justify-content:center;align-items:center;text-align:center;font-family:var(--aozora-ui-fonts);background:var(--aozora-tabs-empty-background);">
							<div>
								<p style="font-size:32px;">青空文庫形式エディタ by kurema</p>
								<p>このアプリを気に入られましたら、是非ご支援をご検討いただけますようお願いします。</p>
							</div>
						</div>
					}
				</div>

			</div>
		</div>
		<div class="aozora_editor_bottom">
			<BottomPanel @ref="bottomPanel" />
		</div>
		<div class="aozora_editor_left">
			<LeftPanel @ref="leftPanel" />
		</div>
		<AozoraEditor.Shared.Shared.Dialogs.Dialog @ref="Dialog" />

	</div>
</CascadingValue>

@code {
	[CascadingParameter]
	public Models.IApplicationModel? AppModel { get; set; }

	public bool SplitVerticalDefault { get; set; } = true;

	MenuBar? MenuBar { get; set; }
	BottomPanel? bottomPanel { get; set; }
	LeftPanel? leftPanel { get; set; }
	public Themes.ThemeControl? Theme { get; private set; }

	public bool WarnUTF8 { get; set; } = true;

	public bool ConfirmExternalNavigation { get; set; } = true;

	private async Task BeforeInternalNavigation(Microsoft.AspNetCore.Components.Routing.LocationChangingContext context)
	{
		var result = await ShowDialog("ページ遷移", "ページを遷移しようとしています。\n続行しますか？", Dialogs.Dialog.IconMessage, new Dialogs.DialogOption("はい", true) { Id = "yes" }, new Dialogs.DialogOption("キャンセル") { Id = "no" });
		if (result is null) return;
		if (result.Value.Id is string and "yes") return;
		context.PreventNavigation();
	}

	public IEnumerable<string> PreviewCssFiles
	{
		get
		{
			yield return PreviewVertical ? "_content/AozoraEditorSharedUI/css/aozora-v.css" : "_content/AozoraEditorSharedUI/css/aozora.css";
			if (PreviewNoMargin) yield return "_content/AozoraEditorSharedUI/css/zero-margin.css";
			if (Theme?.SelectedTheme?.AdditionalCss is not null)
			{
				foreach (var item in Theme.SelectedTheme.AdditionalCss) yield return item;
			}
		}
	}

	public bool PreviewVertical { get; set; } = false;
	public bool PreviewNoMargin { get; set; } = false;

	ICommandEntry[]? _CommonCommands;

	ICommandEntry[] CommonCommands
	{
		get
		{
			var commandOpenFile = CommandEntryFile.FromMaterialSymbolOutlined("file_open", "開く");
			commandOpenFile.FileChanged += async (_, e) =>
		{
	if (e.FileCount != 1 || e.File?.Name == null) return;
	try
	{
		var stream = e.File.OpenReadStream(CommandEntryFile.MaxFileSize);
		await LoadFile(stream, e.File.Name);
	}
	catch
	{
		await ShowDialog("読み込み", "ファイルの読み込みに失敗しました。", Dialogs.Dialog.IconMessage, new Dialogs.DialogOption("了解", true) { Id = "yes" });
	}
		};
			return _CommonCommands ??= new ICommandEntry[]
	{
				commandOpenFile,
	};
		}
	}

	public void HideMenuBar()
	{
		MenuBar?.Hide();
		CurrentMenu?.Hide();
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var size = await InterOp.Functions.GetWindowSize(jsRuntime);
			SplitVerticalDefault = size.Height <= size.Width;
		}
		catch { }
		try
		{
			if (Theme is not null)
			{
				var darkRequested = await InterOp.Functions.TestMatchMedia(jsRuntime, "(prefers-color-scheme: dark)");
				var newTheme = Theme.ThemeEntries.FirstOrDefault(a => a.Key == (darkRequested ? "Dark" : "Light"));
				if (newTheme is not null) Theme.SelectedTheme = newTheme;
			}
		}
		catch { }
		Pages.Add((new TabPages.EditorTab(Guid.NewGuid(), MonacoEditorAozora.SampleText, "new.txt"), currentSequence++));
		if (ActivePage is null && Pages.Count > 0) ActivateTab(Pages[0].body);
		await base.OnInitializedAsync();
	}

	int currentSequence = 0;

	List<(ITabPage body, int sequence)> Pages { get; set; } = new() { };
	public ITabPage? ActivePage { get; set; }

	void RefreshPages()
	{
		var p = Pages;
		Pages = new();
		StateHasChanged();
		Pages = p;
	}

	public async void TabClicked(MouseEventArgs e, ITabPage page)
	{
		//@onclickは左クリックのみ。onmousedownで真ん中ボタンが機能する。
		switch (e.Button)
		{
			case 0:
				ActivateTab(page);
				break;
			case 1:
				ActivateTab(page);
				await CloseTab(page);
				break;
		}
	}

	public void ActivateTab(ITabPage page)
	{
		//ActivePage = null;
		//StateHasChanged();
		ActivePage = page;
		page.Root = this;
		StateHasChanged();
	}

	public ITabPage? SelectTabByGuid(Guid key)
	{
		var target = Pages.Select(a => a.body).FirstOrDefault(a => a.Id == key);
		if (target is null) return null;
		ActivateTab(target);
		return target;
	}

	public async Task CloseTab(Guid id)
	{
		var page = Pages.Select(a => a.body).FirstOrDefault(a => a.Id == id);
		if (page is null) return;
		await CloseTab(page);
	}

	public async Task CloseTab(ITabPage page)
	{
		switch (page)
		{
			case TabPages.EditorTab et:
				{
					if (et?.Content is null) return;
					if (!(et.OriginalText == await et.Content.GetText()))
					{
						var result = await ShowDialog(et.Content.FileName ?? "確認", "ファイルが変更されています。\n閉じますか？", Dialogs.Dialog.IconMessage, new Dialogs.DialogOption("はい", true) { Id = "yes" }, new Dialogs.DialogOption("キャンセル") { Id = "no" });
						if (result is null) return;
						if (result.Value.Id is string and "no") return;
					}
				}
				break;
		}
		if (!Pages.Any(a => a.body == page)) return;

		int countPage = Pages.FindIndex(a => a.body == page);

		IEnumerable<(ITabPage body, int sequence)> NextPageEnumerator()
		{
			for (int i = countPage + 1; i < Pages.Count; i++) yield return Pages[i];
			for (int i = countPage - 1; i >= 0; i--) yield return Pages[i];
		}

		if (ActivePage == page)
		{
			bool anyHit = false;
			foreach (var p in NextPageEnumerator())
			{
				ActivateTab(p.body);
				anyHit = true;
				break;
			}
			if (!anyHit) ActivePage = null;
		}
		//PagesHidden以前のコードは以下を参照してください。
		//https://github.com/kurema/AozoraEditorBlazorWasm/blob/2a187f617e43211e2f2a3dc44940e2c4062b1e5b/AozoraEditor/AozoraEditorSharedUI/Shared/TabControl.razor#L487
		Pages.RemoveAt(countPage);
		//ないと更新されない。
		StateHasChanged();
	}

	public void AddEditorTab()
	{
		AddEditorTab(MonacoEditorAozora.SampleText, "new.txt");
	}


	public void AddEditorTab(string text, string fileName)
	{
		var page = new TabPages.EditorTab(GetNewGuid(), text, fileName) { };
		Pages.Add((page, currentSequence++));
		ActivateTab(page);
	}

	public void AddEditorTabMarkdown()
	{
		AddEditorTabMarkdown(string.Empty, "new.md");
	}

	public void AddEditorTabMarkdown(string text, string fileName)
	{
		var page = new TabPages.EditorMarkdownTab(GetNewGuid(), text, fileName) { };
		Pages.Add((page, currentSequence++));
		ActivateTab(page);
	}


	private Guid GetNewGuid()
	{
		var id = Guid.NewGuid();
		while (Pages.Any(a => a.body.Id == id)) { id = Guid.NewGuid(); }
		return id;
	}

	public static RenderFragment GetMaterialSymbolOutlined(string name, string? style = null)
	{
		return @<span class="material-symbols-outlined" style="@(style ?? string.Empty)">@name</span>;
	}

	public void NotifyStateChanged()
	{
		StateHasChanged();
	}

	public async Task OpenInNewTab(string url)
	{
		await jsRuntime.InvokeVoidAsync("open", url, "_blank");
	}

	public void OepnInNewInternalTab(string url, string title)
	{
		var page = new TabPages.IFrameTab(GetNewGuid(), url, title);
		Pages.Add((page, currentSequence++));
		ActivateTab(page);
	}

	public async Task ShowVersionInfo()
	{
		AozoraEditor.Shared.Models.Version.version? v = null;
		try
		{
			using var stream = typeof(FullEditor).Assembly.GetManifestResourceStream("AozoraEditor.Shared.Models.Version.xml") ?? throw new Exception("Loading resouce failed!");
			using var sr = new StreamReader(stream);
			var xs = new System.Xml.Serialization.XmlSerializer(typeof(AozoraEditor.Shared.Models.Version.version));
			v = (AozoraEditor.Shared.Models.Version.version?)xs.Deserialize(sr);
		}
		catch
		{
		}
		v = v ?? new() { commit = "placeholder", date = DateTime.Now, version1 = "placeholder", show = false };

		var detail = $"バージョン：{v.version1}\nコミット：{v.commit}\n日付：{v.date:F}\n";
		await ShowDialog("青空文庫形式エディタ", $"作者：kurema\n{(v.show ? detail : string.Empty)}\nPowered by C# and Blazor.", Dialogs.Dialog.IconMessage, new Dialogs.DialogOption("閉じる", true) { Id = "close" });
	}

	public async Task<Dialogs.DialogOption?> ShowDialog(string title, string text, RenderFragment? icon, params Dialogs.DialogOption[] options)
	{
		if (Dialog is null) return null;
		var result = await Dialog.ShowDialog(title, text, icon, options);
		bottomPanel?.AppendAppMessage($"{text}\n> {result.Text}\n", title);
		return result;
	}

	public void AppendAppMessage(string text, string title)
	{
		bottomPanel?.AppendAppMessage($"{text}\n", title);
	}

	public async Task LoadFile(Stream stream, string fileName)
	{
		if (stream is null || string.IsNullOrEmpty(fileName)) return;
		var ext = Path.GetExtension(fileName);
		try
		{
			var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			if (ext.Equals(".zip", StringComparison.InvariantCultureIgnoreCase))
			{
				using var zip = new System.IO.Compression.ZipArchive(ms, System.IO.Compression.ZipArchiveMode.Read);
				foreach (var file in zip.Entries.Where(a => System.IO.Path.GetExtension(a.Name)?.Equals(".txt", StringComparison.InvariantCultureIgnoreCase) == true))
				{
					var s2 = file.Open();
					if (s2 is null) continue;
					var text = await LoadText(s2);
					if (text is null) continue;
					var fileNameTemp = Path.GetFileName(file.FullName);
					AddEditorTab(text, fileNameTemp);
				}
			}
			else
			{
				var text = await LoadText(ms);
				if (text is null) throw new Exception();
				var fileNameTemp = Path.GetFileName(fileName);
				AddEditorTab(text, fileNameTemp);
			}
		}
		catch
		{
			throw;
		}
		return;
	}

	private async Task<string?> LoadText(Stream stream)
	{
		try
		{
			var sjis = Aozora.Aozora2Html.ShiftJisExceptionFallback;
			if (sjis is null) throw new Exception();
			using var sr = new StreamReader(stream, sjis);
			return await sr.ReadToEndAsync();
		}
		catch { }
		try
		{
			using var sr = new StreamReader(stream, true);
			return await sr.ReadToEndAsync();
		}
		catch { }
		return null;
	}

	public void ShowDiffTab(string fileName, string original, string modified)
	{
		var page = new TabPages.DiffTab(fileName, original, modified) { Id = GetNewGuid() };
		Pages.Add((page, currentSequence++));
		ActivateTab(page);
	}

	public Models.Notes.notes Notes { get; set; } = new()
		{
			Items = new object[]{
				new Models.Notes.notesText(){header="ようこそ",Value="メモをしましょう。\nアイデア・頻出語句・登場人物、なんでもメモしておくと便利です。\nタスクも記録しておけます。"},
				new Models.Notes.notesTasks(){header="タスク",Items=new Models.Notes.task[]{ new() { header=string.Empty } } },
	}
		};

	public Dialogs.Dialog? Dialog { get; private set; }

	bool _OutputVisible = false;
	public bool OutputVisible { get => _OutputVisible; set { _OutputVisible = value; StateHasChanged(); } }

	public void SetOutputMessage(string message, string title, Guid source)
	{
		bottomPanel?.SetOutputMessage(message, title, source);
		if (!string.IsNullOrWhiteSpace(message) && bottomPanel?.AutoOpen == true) OutputVisible = true;
		StateHasChanged();
	}

	public IMenuParent? CurrentMenu { get; set; }
}
