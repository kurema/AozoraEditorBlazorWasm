@inject IJSRuntime JSRuntime;

<StandaloneCodeEditor Id="@EditorId" ConstructionOptions="EditorConstructionOptions" @ref="Content" />

@code {
	public StandaloneCodeEditor? Content;

	string EditorId => Id.ToString();

	[CascadingParameter(Name = nameof(Id))]
	public Guid Id { get; set; }

	[CascadingParameter(Name = nameof(Root))]
	public TabControl? Root { get; set; }

	//protected override async Task OnParametersSetAsync()
	//{
	//	await MonacoInterop.Setup.RegisterAozoraOnDemand(JSRuntime);
	//	await base.OnParametersSetAsync();
	//}

	private string? _Text;

	[Parameter]
	public string OriginalText { get; set; } = SampleText;

	public async Task<string> GetText()
	{
		if (Content is null) return _Text ?? string.Empty;
		return await Content.GetValue();
	}

	public async Task SetText(string value)
	{
		if (Content is null)
		{
			_Text = value;
			return;
		}
		await Content.SetValue(value);
	}

	protected override async Task OnInitializedAsync()
	{
		await MonacoInterop.Setup.RegisterAozoraOnDemand(JSRuntime, Root?.Theme?.SelectedTheme.MonacoTheme ?? "aozora-theme");
		await base.OnInitializedAsync();
	}

	public static string SampleText => "著名\n著者\n\n　ある日、わたくしが書物を手に、その中の文章の行間に、小説というものの意味を捜し求めることがいかに困難であるかと気づいた。しかるに、わたくしが人々から得たる評価は、あたかも小説家そのものであるかのごとく、わたくしの文体を称賛するものであった。しかし、わたくしは小説家としての自分自身を理解せず、書物の中に小説の本質を探ろうとしても、その答えを見つけることができなかった。\n　それゆえ、小説の本文とはこのようなものだと断言することなど、わたくしには不可能である。しかしながら、わたくしはそれを試みたいと思う。そこで、わたくしは思い切って、小説の本文について語ろうと思う。\n　小説の本文とは、まず、いかなる物語をもってして、人々の心を捉えるものである。それは、まるで水面に浮かぶ葉のように、読者の心をそっとかすめていく。その葉は、ある時は波に乗り、ある時は風に吹かれ、静かな水面を漂っていく。小説の本文もまた、時に激しく動かされ、時に静かに流れるものである。\n\n\n\n［＃本文終わり］\nこの文章はGPT-4が作成しました。\n";

	private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
	{
		return new StandaloneEditorConstructionOptions
			{
				AutomaticLayout = true,
				Language = "aozora",
				Value = _Text ?? OriginalText,
				//テーマはこの後変更されるので設定しません。
				Folding = true,
				WordWrap = "on",
				Suggest = new SuggestOptions()
				{
					SnippetsPreventQuickSuggestions = false,
				},
				UnicodeHighlight = new UnicodeHighlightOptions()
				{
					AmbiguousCharacters = false,
					InvisibleCharacters = false,
				}
			};
	}
}
