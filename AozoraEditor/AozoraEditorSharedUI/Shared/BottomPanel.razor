<div class="bottom_panel_container">
	<div class="bottom_panel_tab_bar">
		<ul class="bottom_panel_tab_bar_container">
			@foreach (var item in tabEntries)
			{
				if (item == activeTab)
				{
					<li class="bottom_panel_tab_item bottom_panel_tab_item_selected">@item.Title</li>

				}
				else
				{
					<li class="bottom_panel_tab_item" @onclick="()=>{activeTab=item;}">@item.Title</li>
				}
			}
		</ul>
	</div>
	<div class="bottom_panel_tab_bar_right">
		@if (activeTab.Key == "output")
		{
			<label>
				<Microsoft.AspNetCore.Components.Forms.InputCheckbox @bind-Value="AutoOpen" />
				自動的に開く
			</label>
			<select @bind="selectedOutputFile">
				@foreach (var item in Messages)
				{
					<option value="@item.Key">@item.Value.title</option>
				}
			</select>
		}
		<button @onclick:preventDefault @onclick:stopPropagation="true" class="ButtonMini" @onclick="()=>{if(Parent is not null)Parent.OutputVisible=false;}">
			<span class="material-symbols-outlined">
				close
			</span>
		</button>
	</div>
	<div class="bottom_panel_tab_body">
		@switch (activeTab.Key)
		{
			case "output":
				var guid = selectedOutputFile;
				@*@((MarkupString)currentOutputMessageHtml)*@
				var text = currentOutputMessage.AsSpan();
				while (true)
				{
				case_top:
					int index1 = text.IndexOf('(');
					if (index1 < 0) goto case_break;
					var text2 = text.Slice(index1);
					int index2 = text2.IndexOf('行');
					if (index2 < 1) goto case_next;
					var text3 = text2.Slice(index2);
					if (!text3.StartsWith("行目)")) goto case_break;
					var text4 = text2.Slice(1, index2 - 1);
					if (!int.TryParse(text4, out int line)) goto case_next;
					var output = System.Web.HttpUtility.HtmlEncode(text.Slice(0, index1).ToString());
					var output2 = text.Slice(index1, index2 + 3);
					@output
					<a @onclick="()=>{SelectTabAndGoto(guid,new Position(){Column=1,LineNumber=line});}">@output2.ToString()</a>
					text = text.Slice(index1 + index2 + 3);
					continue;
				case_next:
					;
					@(text.Slice(0, index1 + 1).ToString())
					text = text.Slice(index1 + 1);
					goto case_top;
				case_break:
					;
					@(text.ToString())
					break;
				}
				@*@currentOutputMessage*@
				break;
			case "output_app":
				@currentAppMessage
				break;
		}
	</div>
</div>

<style>
	.bottom_panel_container {
		flex: 1 0 0;
		width: 100%;
		min-width: 0;
		display: grid;
		grid-template-rows: auto 1fr;
		grid-template-columns: 1fr auto;
	}

		.bottom_panel_container > .bottom_panel_tab_bar {
			line-height: 27px;
			height: 35px;
			font-family: Segoe WPC,Segoe UI,sans-serif;
			width: 100%;
			min-width: 0;
		}

			.bottom_panel_container > .bottom_panel_tab_bar > .bottom_panel_tab_bar_container {
				display: flex;
				margin: 0 auto;
				padding: 0;
				height: 100%;
				width: 100%;
				align-items: center;
				grid-row: 1/2;
				grid-column: 1/2;
				user-select: none;
			}

				.bottom_panel_container > .bottom_panel_tab_bar > .bottom_panel_tab_bar_container > .bottom_panel_tab_item {
					color: rgb(59, 59, 59);
					font-size: 14px;
					margin: 2px 10px;
					list-style: none;
					border-bottom: solid 1px transparent;
				}

					.bottom_panel_container > .bottom_panel_tab_bar > .bottom_panel_tab_bar_container > .bottom_panel_tab_item.bottom_panel_tab_item_selected {
						border-bottom: solid 1px rgb(0, 95, 184);
					}

		.bottom_panel_container > .bottom_panel_tab_bar_right {
			grid-row: 1/2;
			grid-column: 2/3;
			display: flex;
			align-items: stretch;
			font-family: Segoe WPC,Segoe UI,sans-serif;
		}

			.bottom_panel_container > .bottom_panel_tab_bar_right > select {
				cursor: pointer;
				min-width: 100px;
				min-height: 18px;
				padding: 2px 23px 2px 8px;
				appearance: none;
				-webkit-appearance: none;
				-moz-appearance: none;
				border: 1px solid #cecece;
				background-color: white;
				vertical-align: middle;
			}

			.bottom_panel_container > .bottom_panel_tab_bar_right > label {
				vertical-align: middle;
				display: flex;
				align-items: center;
			}

		.bottom_panel_container > .bottom_panel_tab_body {
			grid-row: 2/3;
			grid-column: 1/3;
			padding: 0 20px 1em;
			overflow: scroll;
			font-family: Consolas, "Courier New", monospace;
			white-space: pre;
		}

			.bottom_panel_container > .bottom_panel_tab_body a {
				color: #484848;
			}

				.bottom_panel_container > .bottom_panel_tab_body a:hover {
					color: #686868;
				}
</style>

@code {
	string currentOutputMessage => Messages.TryGetValue(selectedOutputFile, out var s) ? s.message : string.Empty;
	string currentAppMessage { get; set; } = string.Empty;

	Dictionary<Guid, (string title, string message)> Messages { get; } = new()
	{ {new Guid(), ("welcome","プレビュー作成の出力はここに表示されます。")} };

	public bool AutoOpen { get; set; } = true;

	System.Collections.ObjectModel.ObservableCollection<TabEntry> tabEntries { get; } = new()
	{
		new("出力","output"),
		new("アプリのメッセージ","output_app"),
	};

	TabEntry activeTab { get; set; }

	Guid selectedOutputFile { get; set; } = new Guid();

	//private void SelectedCarsChanged(ChangeEventArgs e)
	//{
	//	if (e.Value is string s && Messages.ContainsKey(s))
	//	{
	//		selectedOutputFile = s;
	//		StateHasChanged();
	//	}
	//}

	public void SetOutputMessage(string message, string title, Guid source)
	{
		Messages[source] = (title, message);
		selectedOutputFile = source;
		activeTab = tabEntries.FirstOrDefault(a => a.Key == "output") ?? activeTab;
		StateHasChanged();
	}

	public BottomPanel() : base()
	{
		activeTab = tabEntries[0];
	}

	public void AppendAppMessage(string message, string title)
	{
		const int maxLen = 10240;

		var span = currentAppMessage.AsSpan();
		if (currentAppMessage.Length + message.Length > maxLen)
		{
			int exceed = currentAppMessage.Length + message.Length - maxLen;

			while (true)
			{
				int index = span.LastIndexOf('\n');
				if (index < 0) break;
				span = span.Slice(0, index);
				if (span.Length + message.Length <= maxLen) break;
			}
			currentAppMessage = $"[{DateTime.Now.ToString()}] [{title}]\n{message}\n{span}\n";
		}
		else
		{
			currentAppMessage = $"[{DateTime.Now.ToString()}] [{title}]\n{message}\n{currentAppMessage}";
		}

		StateHasChanged();
	}

	record TabEntry(string Title, string Key) { }

	[CascadingParameter]
	public TabControl? Parent { get; private set; }

	public void SelectTabAndGoto(Guid guid, Position position)
	{
		var result = Parent?.SelectTabByGuid(guid);
		if (result is not TabPages.EditorTab et || et.Content is null) return;
		et.Content.SetPosition(position);
	}
}
