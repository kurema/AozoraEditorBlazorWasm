@if (!IsHidden)
{
	<div class="dialog_modal_fullscreen">
		<div class="dialog_shadow">
			<!-- dialogを使った場合はInterop機能を使うことになるので複雑になる。 -->
			<div class="dialog_box">
				<div class="dialog_buttons_row">
					<div class="dialog_buttons">
						@foreach (var item in Options)
						{
							if (item.IsHighlighted)
							{
								<a role="button" tabindex="0" class="text_button text_button_highlight" @onclick="()=>{Clicked(item);}">@item.Text</a>
							}
							else
							{
								<a role="button" tabindex="0" class="text_button" @onclick="()=>{Clicked(item);}">@item.Text</a>
							}
						}
					</div>
				</div>
				<div class="dialog_message_row">
					@if (Icon is not null)
					{
						<div class="dialog_icon">@Icon</div>
					}
					<div class="dialog_message_container">
						<div class="dialog_message_title">
							@Title
						</div>
						<div class="dialog_message_detail">
							@Message
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	TaskCompletionSource<DialogOption>? tcs;
	RenderFragment? Icon { get; set; }
	bool IsHidden { get; set; } = true;

	IEnumerable<DialogOption> Options { get; set; } = new[] { new DialogOption("OK", true), };

	string Message { get; set; } = string.Empty;
	string Title { get; set; } = string.Empty;

	public static RenderFragment IconMessage => TabControl.GetMaterialSymbolOutlined("info", "color:#2088ff;font-size:48px;");
	public static RenderFragment IconError => TabControl.GetMaterialSymbolOutlined("error", "color:#e50000;font-size:48px;");
	//@<span class="material-symbols-outlined" style="color:#2088ff;font-size:48px;">info</span>;

	void Clicked(DialogOption option)
	{
		IsHidden = true;
		if (tcs is null) return;
		option.Callback?.Invoke(option);
		tcs.SetResult(option);
		StateHasChanged();
	}

	public Task<DialogOption> ShowDialog(string title, string text, RenderFragment? icon, params DialogOption[] options)
	{
		Message = text;
		Title = title;
		Icon = icon;
		Options = options;
		IsHidden = false;
		tcs = new TaskCompletionSource<DialogOption>();
		StateHasChanged();
		return tcs.Task;
	}
}
