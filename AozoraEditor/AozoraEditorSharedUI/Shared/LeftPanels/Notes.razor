@using Models.Notes;

<div class="aozora_left_panel_notes_container">
	<div class="aozora_left_panel_notes_header">
		<p class="aozora_left_panel_notes_header_title">ノート</p>
		<div class="aozora_left_panel_notes_header_icon_edit @(EditMode?"aozora_left_panel_notes_header_icon_edit_on":string.Empty)" @onclick="_=>EditMode=!EditMode">@(TabControl.GetMaterialSymbolOutlined("edit"))</div>
	</div>

	<div class="aozora_left_panel_notes_index_container_background"></div>

	<div class="aozora_left_panel_notes_index_container">
		<button class="aozora_left_panel_notes_index_item @(null == Selected? "aozora_left_panel_notes_index_item_selected":string.Empty)" @onclick="_=>Selected=null">
			@(TabControl.GetMaterialSymbolOutlined("list"))
		</button>

		@if (Root?.Notes?.Items is not null)
		{
			foreach (var item in Root.Notes.Items)
			{
				<button class="aozora_left_panel_notes_index_item @(item == Selected? "aozora_left_panel_notes_index_item_selected":string.Empty)" @onclick="_=>Selected=item">
					<p>@GetHeaderOfItem(item)</p>
				</button>
			}
		}

		<button class="aozora_left_panel_notes_index_item" @onclick="_=>AddNote()">
			@(TabControl.GetMaterialSymbolOutlined("add"))
		</button>

	</div>

	<div class="aozora_left_panel_notes_body">
		@switch (Selected)
		{
			case notesTasks itemTask:
				<div class="aozora_left_panel_notes_body_tasks">
					<input @bind="itemTask.header" class="aozora_left_panel_notes_body_general_header" placeholder="タイトル" />
					@foreach (var item in itemTask.Items)
					{
						@GetTaskUi(item)
					}
					@*<input class="aozora_left_panel_notes_body_task_title_new" placeholder="新規タスク" />*@
				</div>
				break;
			case notesText itemText:
				<div class="aozora_left_panel_notes_body_note">
					<input class="aozora_left_panel_notes_body_general_header" @bind="itemText.header" placeholder="タイトル" />
					<textarea @bind="itemText.Value" placeholder="本文" />
				</div>
				break;
			default:
				<div class="aozora_left_panel_notes_body_toc">
					@if (Root?.Notes?.Items is not null)
					{
						foreach (var item in Root.Notes.Items)
						{
							<button class="aozora_left_panel_notes_body_toc_item">
								<div class="aozora_left_panel_notes_body_toc_item_icon">
									@switch (item)
									{
										case notesTasks itemTask:
											@(TabControl.GetMaterialSymbolOutlined("task"))
											break;
										case notesText itemText:
											@(TabControl.GetMaterialSymbolOutlined("note"))
											break;
									}
								</div>
								<div class="aozora_left_panel_notes_body_toc_item_header">@GetHeaderOfItem(item)</div>
							</button>
						}
					}
				</div>
				break;
		}
	</div>

</div>

<style>
	.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_toc {
		width: 100%;
		height: 100%;
		overflow-y: scroll;
		display: flex;
		flex-direction: column;
	}

		.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_toc .aozora_left_panel_notes_body_toc_item {
			/*border: solid 1px var(--aozora-left-notes-border-color);*/
			margin: 12px 12px 0 12px;
			padding: 7px;
			display: grid;
			grid-template-columns: auto 1fr auto;
			align-items: center;
			gap: 5px;
			/*box-shadow: 0px 0px 4px 3px rgba(0,0,0,0.2) inset;*/
			box-shadow: 0px 0px 0px 0px rgba(0,0,0,0.2) inset;
			transition: box-shadow 0.4s;
			cursor: default;
			overflow: hidden;
			user-select: none;
		}

			.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_toc .aozora_left_panel_notes_body_toc_item:hover {
				box-shadow: 0px 0px 10px 4px rgba(0,0,0,0.2) inset;
			}

			.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_toc .aozora_left_panel_notes_body_toc_item > .aozora_left_panel_notes_body_toc_item_icon {
				grid-column: 1/2;
			}

			.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_toc .aozora_left_panel_notes_body_toc_item > .aozora_left_panel_notes_body_toc_item_header {
				grid-column: 2/3;
			}

	.aozora_left_panel_notes_container {
		--aozora-left-notes-background: #fdfce8;
		--aozora-left-notes-border-color: #b0afa1;
		--aozora-left-notes-header-background: #211914;
		--aozora-left-notes-header-color: white;
		--aozora-left-notes-tab-background: #f0efdc;
		display: grid;
		grid-template-columns: minmax(0,1fr) auto;
		grid-template-rows: auto minmax(0,1fr);
		width: 100%;
		height: 100%;
		flex: 1 0 0;
		min-height: 0;
	}

		.aozora_left_panel_notes_container > .aozora_left_panel_notes_header {
			background: var(--aozora-left-notes-header-background);
			color: var(--aozora-left-notes-header-color);
			text-align: center;
			grid-column: 1/3;
			grid-row: 1/2;
			display: grid;
			grid-template-columns: 1fr auto;
		}

			.aozora_left_panel_notes_container > .aozora_left_panel_notes_header > .aozora_left_panel_notes_header_title {
				font-weight: bold;
				margin: 10px 0;
				grid-column: 1/3;
				grid-row: 1/2;
			}

			.aozora_left_panel_notes_container > .aozora_left_panel_notes_header > .aozora_left_panel_notes_header_icon_edit {
				grid-column: 2/3;
				padding: 5px;
				grid-row: 1/2;
				align-items: center;
				display: flex;
			}

				.aozora_left_panel_notes_container > .aozora_left_panel_notes_header > .aozora_left_panel_notes_header_icon_edit.aozora_left_panel_notes_header_icon_edit_on {
					/*box-shadow: 0px 0px 10px 4px rgba(255,255,255,0.4) inset;*/
					background: rgba(255,255,255,0.3);
					/*background: white;
								color: black;*/
				}

		.aozora_left_panel_notes_container > .aozora_left_panel_notes_index_container {
			grid-column: 2/3;
			grid-row: 2/3;
			overflow-y: scroll;
			display: flex;
			flex-direction: column;
			/* Firefoxでは縦書きでレイアウトがおかしくなるので強引に */
			min-width: 1.4em;
			margin-right: 2px;
		}

			.aozora_left_panel_notes_container > .aozora_left_panel_notes_index_container > .aozora_left_panel_notes_index_item {
				background: var(--aozora-left-notes-tab-background);
				border: solid 1px var(--aozora-left-notes-border-color);
				margin-top: 2px;
				cursor: default;
				user-select: none;
			}

				.aozora_left_panel_notes_container > .aozora_left_panel_notes_index_container > .aozora_left_panel_notes_index_item > p {
					/*transform: rotate(90deg);*/
					line-height: 1em;
					margin: 2px;
					display: inline-block;
					writing-mode: vertical-rl;
				}

				.aozora_left_panel_notes_container > .aozora_left_panel_notes_index_container > .aozora_left_panel_notes_index_item.aozora_left_panel_notes_index_item_selected {
					border-left: solid 1px var(--aozora-left-notes-background);
					background: var(--aozora-left-notes-background);
				}

		.aozora_left_panel_notes_container > .aozora_left_panel_notes_index_container_background {
			border-left: solid 1px var(--aozora-left-notes-border-color);
			grid-column: 2/3;
			grid-row: 2/3;
			height: 100%;
		}

		.aozora_left_panel_notes_container > .aozora_left_panel_notes_body {
			grid-column: 1/2;
			grid-row: 2/3;
			/*overflow-y: scroll;*/
			background: var(--aozora-left-notes-background);
			border-top: solid 1px var(--aozora-left-notes-border-color);
			display: flex;
			width: 100%;
			height: 100%;
		}

			.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_note {
				display: grid;
				grid-template-rows: auto 1fr;
				width: 100%;
				height: 100%;
				flex: 1 0 0;
			}

				.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_note > input {
					grid-row: 1/2;
				}

				.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_note > textarea {
					grid-row: 2/3;
					width: 100%;
					height: 100%;
					resize: none;
					box-sizing: border-box;
					display: block;
					-webkit-appearance: none;
					appearance: none;
					border: none;
					background: transparent;
					padding: 0;
					outline: none;
				}

			.aozora_left_panel_notes_container > .aozora_left_panel_notes_body .aozora_left_panel_notes_body_general_header {
				width: 100%;
				-webkit-appearance: none;
				appearance: none;
				border: none;
				background: transparent;
				font-size: 150%;
				outline: none;
				padding: 0;
			}

			.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks {
				overflow-y: scroll;
				flex: 1 0 0;
			}

				.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks .aozora_left_panel_notes_body_task_entry {
					display: grid;
					grid-template-columns: auto 1fr auto;
				}

					.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks .aozora_left_panel_notes_body_task_entry input.aozora_left_panel_notes_body_task_title {
						grid-column: 2/3;
					}

					.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks .aozora_left_panel_notes_body_task_entry input.aozora_left_panel_notes_body_task_title,
					.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks > input.aozora_left_panel_notes_body_task_title_new {
						border: none;
						background: transparent;
						-webkit-appearance: none;
						appearance: none;
						/*white-space: pre-line;
									word-break: break-all;*/
					}

						.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks .aozora_left_panel_notes_body_task_entry input.aozora_left_panel_notes_body_task_title,
						.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks .aozora_left_panel_notes_body_task_entry input.aozora_left_panel_notes_body_task_title:active,
						.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks > input.aozora_left_panel_notes_body_task_title_new,
						.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks > input.aozora_left_panel_notes_body_task_title_new:active {
							outline: none;
							box-sizing: border-box;
							overflow-wrap: anywhere;
							/*width: 100%;*/
							padding: 0;
							display: inline-block;
						}

				.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks > input.aozora_left_panel_notes_body_task_title_new {
					width: 100%;
				}

				.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks ul {
					padding: 0;
					margin: 4px;
				}

					.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks ul li {
						list-style: none;
					}

				.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks > ul ul {
					padding-left: 24px;
				}
</style>
@code {
	bool EditMode { get; set; } = false;

	object? Selected { get; set; }

	static string GetHeaderOfItem(object item)
	{
		return item switch
		{
			notesTasks itemTask => string.IsNullOrEmpty(itemTask.header) ? "メモ" : itemTask.header,
			notesText itemText => string.IsNullOrEmpty(itemText.header) ? "メモ" : itemText.header,
			_ => string.Empty,
		};
	}

	void AddNote()
	{
		var item = new notesText() { header = string.Empty, Value = string.Empty };
		if (Root is null) return;
		var content = Root.Notes;
		if (content?.Items is null) Root.Notes = content = new() { Items = new[] { item } };
		else
		{
			var items = content.Items;
			Array.Resize(ref items, items.Length + 1);
			items[^1] = item;
			content.Items = items;
		}
	}

	public RenderFragment GetTaskUi(task t, bool top = false)
	{
		return
	@<ul>
		<li>
			<div class="aozora_left_panel_notes_body_task_entry">
				<input type="checkbox" @bind="t.isChecked" />
				<input @bind="t.header" class="aozora_left_panel_notes_body_task_title" />
			</div>
			@foreach (var item in t?.Items ?? Array.Empty<task>())
			{
				if (item is not null)
					@GetTaskUi(item)
			}
		</li>
	</ul>;
	}

	[CascadingParameter(Name = nameof(Root))]
	public TabControl? Root { get; private set; }
}
