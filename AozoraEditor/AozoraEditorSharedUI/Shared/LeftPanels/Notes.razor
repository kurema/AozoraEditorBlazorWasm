@inject IJSRuntime jsRuntime
@using Models.Notes;
@using AozoraEditor.Shared.Shared.Menu;

<div class="aozora_left_panel_notes_container">
	<div class="aozora_left_panel_notes_header">
		<p class="aozora_left_panel_notes_header_title">ノート</p>
		<div class="aozora_left_panel_notes_header_icon_edit @(EditMode?"aozora_left_panel_notes_header_icon_edit_on":string.Empty)" @onclick="_=>EditMode=!EditMode">@(FullEditor.GetMaterialSymbolOutlined("edit"))</div>
	</div>

	<div class="aozora_left_panel_notes_index_container_background"></div>

	<div class="aozora_left_panel_notes_index_container">
		<button class="aozora_left_panel_notes_index_item @(null == Selected? "aozora_left_panel_notes_index_item_selected":string.Empty)" @onclick="_=>Selected=null">
			@(FullEditor.GetMaterialSymbolOutlined("list"))
		</button>

		@if (Root?.Notes?.Items is not null)
		{
			foreach (var item in Root.Notes.Items)
			{
				<button class="aozora_left_panel_notes_index_item @(item == Selected? "aozora_left_panel_notes_index_item_selected":string.Empty)" @onclick="_=>Selected=item"
				@oncontextmenu="async e=>{if(menuItemcontext is null)return;selectedItemInContextMenu=item; await menuItemcontext.ShowAsync(e.PageX,e.PageY);}" @oncontextmenu:preventDefault="true">
					<p class="aozora_left_panel_notes_index_item_title">@GetHeaderOfItem(item)</p>
					@if (EditMode)
					{
						<div class="aozora_left_panel_notes_index_item_close" @onclick:preventDefault @onclick:stopPropagation="true" @onclick="_=>DeleteItem(item)">@(FullEditor.GetMaterialSymbolOutlined("close"))</div>
					}
				</button>
			}
		}

		<button class="aozora_left_panel_notes_index_item" @onclick="_=>AddNote()">
			<div class="aozora_left_panel_notes_index_item_icon_default">@(FullEditor.GetMaterialSymbolOutlined("add"))</div>
			<div class="aozora_left_panel_notes_index_item_icon_hover">@(FullEditor.GetMaterialSymbolOutlined("note"))</div>
		</button>

		<button class="aozora_left_panel_notes_index_item" @onclick="_=>AddTask()">
			<div class="aozora_left_panel_notes_index_item_icon_default">@(FullEditor.GetMaterialSymbolOutlined("add"))</div>
			<div class="aozora_left_panel_notes_index_item_icon_hover">@(FullEditor.GetMaterialSymbolOutlined("task"))</div>
		</button>

		<ContextMenu @ref="menuItemcontext">
			<MenuItem Title="タブ関係">
				<MenuItem Title="削除" OnHeaderSelected="_=>DeleteItem(selectedItemInContextMenu)" IconMaterialSymbols="delete" />
			</MenuItem>
		</ContextMenu>
	</div>

	<div class="aozora_left_panel_notes_body">
		@switch (Selected)
		{
			case notesTasks itemTask:
				<div class="aozora_left_panel_notes_body_tasks" @onclick="_=>SelectedTask=null">
					<div class="aozora_left_panel_notes_body_tasks_header">
						<textarea @bind="itemTask.header" rows="1" class="aozora_left_panel_notes_body_general_header autoresize" placeholder="タイトル" oninput='@textareaAutoResizeJs' style="@textareaAutoResizeDefaultStyle" />
						@if (EditMode)
						{
							<button @onclick="_=>DeleteItem(itemTask)">
								@(FullEditor.GetMaterialSymbolOutlined("delete"))
							</button>
						}
					</div>
					<div class="aozora_left_panel_notes_body_tasks_add_header">
						<button class="aozora_left_panel_notes_body_tasks_add" @onclick="_=>{AddTaskItem(itemTask);SelectedTask=null;}">
							<div class="aozora_left_panel_notes_body_tasks_add_icon">@(FullEditor.GetMaterialSymbolOutlined("task"))</div>
							<div class="aozora_left_panel_notes_body_tasks_add_title">タスクを追加</div>
						</button>
						<div class="aozora_left_panel_notes_body_tasks_add_more">
							<MenuButton HeaderMaterial="more_vert">
								<MenuItem Title="タスクメニュー">
									<MenuItem Title="空のタスクをクリア" OnHeaderSelected="_=>ClearEmpty(itemTask)" IconMaterialSymbols="mop" />
									<MenuItem Title="完了したタスクをクリア" OnHeaderSelected="_=>itemTask.Items=itemTask?.Items.Where(a=>a.isChecked!=true).ToArray()" IconMaterialSymbols="mop" />
									<MenuSeparater />
									<MenuItemCheckbox Title="完了したタスクを表示する" IsChecked="itemTask.showCompleted"
													  Checked="_=>{itemTask.showCompleted=true;}" UnChecked="_=>{itemTask.showCompleted=false;}" />
									<MenuItemCheckbox Title="完了したサブタスクを表示する" IsChecked="itemTask.showCompletedSub"
													  Checked="_=>{itemTask.showCompletedSub=true;}" UnChecked="_=>{itemTask.showCompletedSub=false;}" />
								</MenuItem>
							</MenuButton>
						</div>
					</div>
					@{
						bool noTask = true;
						<div class="aozora_left_panel_notes_body_tasks_items" @onclick:stopPropagation="true" @onclick="_=>{}">
							@foreach (var item in itemTask.Items.OrderBy(a => a.isChecked))
							{
								if (item.isChecked && !itemTask.showCompleted) continue;
								@GetTaskUi(item,itemTask,itemTask)
								noTask = false;
							}
						</div>
						if (noTask)
						{
							<p class="aozora_left_panel_notes_body_tasks_complete_main">すべてのタスクが完了しました！</p>
							<p class="aozora_left_panel_notes_body_tasks_complete_sub">おめでとうございます</p>
						}
					}
				</div>
				break;
			case notesText itemText:
				<div class="aozora_left_panel_notes_body_note">
					<textarea rows="1" class="aozora_left_panel_notes_body_general_header autoresize" @bind="itemText.header" placeholder="タイトル" oninput='@textareaAutoResizeJs' style="@textareaAutoResizeDefaultStyle" />
					<textarea @bind="itemText.Value" placeholder="本文" />
					@if (EditMode)
					{
						<button @onclick="_=>DeleteItem(itemText)">
							@(FullEditor.GetMaterialSymbolOutlined("delete"))
						</button>
					}
				</div>
				break;
			default:
				<div class="aozora_left_panel_notes_body_toc">
					<div class="aozora_left_panel_notes_body_toc_add">
						<div class="aozora_left_panel_notes_body_toc_add_icon_plus">
							@(FullEditor.GetMaterialSymbolOutlined("add"))
						</div>
						<button class="aozora_left_panel_notes_body_toc_add_icon" @onclick="_=>AddNote()">
							@(FullEditor.GetMaterialSymbolOutlined("note"))
						</button>
						<button class="aozora_left_panel_notes_body_toc_add_icon" @onclick="_=>AddTask()">
							@(FullEditor.GetMaterialSymbolOutlined("task"))
						</button>
					</div>

					@if (Root?.Notes?.Items is not null)
					{
						foreach (var item in Root.Notes.Items)
						{
							<div class="aozora_left_panel_notes_body_toc_item" @onclick="_=>{Selected=item;}"
							@oncontextmenu="async e=>{if(menuItemcontext is null)return;selectedItemInContextMenu=item; await menuItemcontext.ShowAsync(e.PageX,e.PageY);}" @oncontextmenu:preventDefault="true">
								<div class="aozora_left_panel_notes_body_toc_item_icon">
									@switch (item)
									{
										case notesTasks itemTask:
											@(FullEditor.GetMaterialSymbolOutlined("task"))
											break;
										case notesText itemText:
											@(FullEditor.GetMaterialSymbolOutlined("note"))
											break;
									}
								</div>
								<div class="aozora_left_panel_notes_body_toc_item_header">@GetHeaderOfItem(item)</div>
								@if (EditMode)
								{
									<button @onclick="_=>MoveItem(item,-1)" class="aozora_left_panel_notes_body_toc_item_up" @onclick:preventDefault @onclick:stopPropagation="true" disabled="@(Root.Notes.Items.FirstOrDefault()==item?"disabled":null)">
										@(FullEditor.GetMaterialSymbolOutlined("arrow_upward"))
									</button>
									<button @onclick="_=>MoveItem(item,+1)" class="aozora_left_panel_notes_body_toc_item_down" @onclick:preventDefault @onclick:stopPropagation="true" disabled="@(Root.Notes.Items.LastOrDefault()==item?"disabled":null)">
										@(FullEditor.GetMaterialSymbolOutlined("arrow_downward"))
									</button>
									<button class="aozora_left_panel_notes_body_toc_item_delete" @onclick:preventDefault @onclick:stopPropagation="true" @onclick="_=>DeleteItem(item)">
										@(FullEditor.GetMaterialSymbolOutlined("delete"))
									</button>
								}
							</div>
						}
					}
				</div>
				break;
		}
	</div>

</div>

<style>
	.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks .aozora_left_panel_notes_body_task_entry > .aozora_left_panel_notes_body_task_entry_star.aozora_left_panel_notes_body_task_entry_star_off {
		font-variation-settings: 'FILL' 0 !important;
	}

	.aozora_left_panel_notes_container > .aozora_left_panel_notes_body > .aozora_left_panel_notes_body_tasks .aozora_left_panel_notes_body_task_entry > .aozora_left_panel_notes_body_task_entry_star.aozora_left_panel_notes_body_task_entry_star_on {
		font-variation-settings: 'FILL' 1 !important;
	}

</style>

@code {
	Menu.ContextMenu? menuItemcontext { get; set; }

	bool EditMode { get; set; } = false;

	object? _Selected;
	object? Selected { get => _Selected; set { _Selected = value; SelectedTask = null; } }
	task? SelectedTask { get; set; }

	static string GetHeaderOfItem(object item)
	{
		return item switch
		{
			notesTasks itemTask => string.IsNullOrEmpty(itemTask.header) ? "タスク" : itemTask.header,
			notesText itemText => string.IsNullOrEmpty(itemText.header) ? "メモ" : itemText.header,
			_ => string.Empty,
		};
	}

	void AddNote() => AddContentItem(new notesText() { header = string.Empty, Value = string.Empty });

	void AddTask() => AddContentItem(new notesTasks() { header = string.Empty, Items = new[] { new task() { header = string.Empty } } });

	void MoveItem(object target, int shift)
	{
		if (Root?.Notes?.Items is null) return;

		var index = Array.IndexOf(Root.Notes.Items, target);
		if (index < 0) return;
		var shifted = index + shift;
		if (shifted < 0 || Root.Notes.Items.Length <= shifted) return;
		(Root.Notes.Items[index], Root.Notes.Items[shifted]) = (Root.Notes.Items[shifted], Root.Notes.Items[index]);
	}

	void MoveTask(object? parent, task t, int shift)
	{
		switch (parent)
		{
			case notesTasks nt:
				{
					if (nt.Items is null) break;
					var index = Array.IndexOf(nt.Items, t);
					switchItems(nt.Items, index, index + shift);
					break;
				}
			case task t2:
				{
					if (t2.Items is null) break;
					var index = Array.IndexOf(t2.Items, t);
					switchItems(t2.Items, index, index + shift);
					break;
				}
			default: return;
		}

		static void switchItems(task[]? target, int a, int b)
		{
			if (target is null) return;
			if (a < 0 || b < 0 || a >= target.Length || b >= target.Length) return;
			(target[a], target[b]) = (target[b], target[a]);
		}
	}

	void DeleteItem(object? item)
	{
		if (Root?.Notes?.Items is null) return;
		if (item is null) return;
		var items = Root.Notes.Items.ToList();
		items.Remove(item);
		Root.Notes.Items = items.ToArray();
		if (Selected == item) Selected = null;
	}

	void AddContentItem(object item)
	{
		if (Root is null) return;
		var content = Root.Notes;
		if (content?.Items is null) Root.Notes = content = new() { Items = new[] { item } };
		else
		{
			var items = content.Items;
			Array.Resize(ref items, items.Length + 1);
			items[^1] = item;
			content.Items = items;
		}
		Selected = item;
	}

	const string textareaAutoResizeJs = "this.style.height=\"auto\";this.style.height=this.scrollHeight+\"px\";";
	const string textareaAutoResizeDefaultStyle = "height:auto;";

	protected override async void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		await InterOp.Functions.UpdateTextAreaSize(jsRuntime, ".aozora_left_panel_notes_container textarea.autoresize");
	}

	RenderFragment GetTaskUi(task t, object? parent, notesTasks root)
	{
		t.isCheckedSpecified = true;
		return
	@<ul>
		<li>
			<div class="aozora_left_panel_notes_body_task_entry">
				<input type="checkbox" @bind="@(t.isChecked)" @bind:after="()=>AfterChanged(t,parent)" />
				<textarea @bind="t.header" class="aozora_left_panel_notes_body_task_title autoresize" oninput='@textareaAutoResizeJs' style="@textareaAutoResizeDefaultStyle" rows="1" placeholder="タイトル" @onfocus="_=>SelectedTask=t" />
				@if (EditMode)
				{
					var tasks = GetTasks(parent);
					<button @onclick="_=>MoveTask(parent,t,-1)" style="grid-column:3/4;" disabled="@(tasks?.FirstOrDefault() == t?"disabled":null)">
						@(FullEditor.GetMaterialSymbolOutlined("arrow_upward"))
					</button>
					<button @onclick="_=>MoveTask(parent,t,+1)" style="grid-column:4/5;" disabled="@(tasks?.LastOrDefault() == t?"disabled":null)">
						@(FullEditor.GetMaterialSymbolOutlined("arrow_downward"))
					</button>

					<button @onclick="_=>DeleteTask(parent,t)" style="grid-column:5/6;">
						@(FullEditor.GetMaterialSymbolOutlined("delete"))
					</button>
				}
				<div class="aozora_left_panel_notes_body_task_entry_menu">
					<MenuButton HeaderMaterial="more_vert">
						<MenuItem Title="タスクメニュー">
							<MenuItem Title="サブタスクを追加" OnHeaderSelected="_=>AddTaskItem(t)" IconMaterialSymbols="subdirectory_arrow_right" />
							<MenuItem Title="削除" OnHeaderSelected="_=>DeleteTask(parent,t)" IconMaterialSymbols="delete" />
							<MenuSeparater />
							<MenuItem Title="期限: 今日" OnHeaderSelected="_=>{t.deadlineSpecified=true;t.deadline=DateTime.Today;}" IconMaterialSymbols="today"
									  IsVisible="()=>!t.deadlineSpecified || t.deadline != DateTime.Today" />
							<MenuItem Title="期限: 明日" OnHeaderSelected="_=>{t.deadlineSpecified=true;t.deadline=DateTime.Today.AddDays(1);}" IconMaterialSymbols="today"
									  IsVisible="()=>!t.deadlineSpecified || t.deadline != DateTime.Today.AddDays(1)" />
							<MenuItem Title="期限を削除" OnHeaderSelected="_=>{t.deadlineSpecified=false;t.deadline=default;t.interval=string.Empty;}" IconMaterialSymbols="calendar_month"
									  IsVisible="()=>t.deadlineSpecified" />
							<MenuSeparater IsVisible="()=>t.deadlineSpecified" />
							<MenuItem Title="繰り返し: 毎日" IsVisible="@(()=>t.deadlineSpecified && t.interval!="P1D")" OnHeaderSelected="@(_=>{t.interval="P1D";})" IconMaterialSymbols="event_repeat" />
							<MenuItem Title="繰り返し: 毎週" IsVisible="@(()=>t.deadlineSpecified && t.interval!="P7D")" OnHeaderSelected="@(_=>{t.interval="P7D";})" IconMaterialSymbols="event_repeat" />
							<MenuItem Title="繰り返し: 毎月" IsVisible="@(()=>t.deadlineSpecified && t.interval!="P1M")" OnHeaderSelected="@(_=>{t.interval="P1M";})" IconMaterialSymbols="event_repeat" />
							<MenuItem Title="繰り返し: なし" IsVisible="@(()=>t.deadlineSpecified && !string.IsNullOrEmpty(t.interval))" OnHeaderSelected="@(_=>{t.interval=string.Empty;})" IconMaterialSymbols="event_repeat" />
						</MenuItem>
					</MenuButton>
				</div>
				<button class="aozora_left_panel_notes_body_task_entry_star @(t.stared ? "aozora_left_panel_notes_body_task_entry_star_on":"aozora_left_panel_notes_body_task_entry_star_off")"
				@onclick="_=>t.stared=!t.stared">
					@(FullEditor.GetMaterialSymbolOutlined("star", $"font-variation-settings: 'FILL' {(t.stared ? 1 : 0)};"))
				</button>
				@if (SelectedTask == t || !string.IsNullOrEmpty(t.detail))
				{
					<textarea class="aozora_left_panel_notes_body_task_detail autoresize" @bind="t.detail" placeholder="詳細" oninput='@textareaAutoResizeJs' style="@textareaAutoResizeDefaultStyle" rows="1" @onfocus="_=>SelectedTask=t" />
				}
				@if (SelectedTask == t)
				{
					if (t.deadlineSpecified)
					{
						<div class="aozora_left_panel_notes_body_task_entry_deadline">
							<button @onclick="_=>{t.deadline=default;t.deadlineSpecified=false;t.interval=string.Empty;}" title="期限をクリア">
								<div class="aozora_left_panel_notes_container_not_hover_icon">
									@(FullEditor.GetMaterialSymbolOutlined("calendar_month"))
								</div>
								<div class="aozora_left_panel_notes_container_hover_icon">
									@(FullEditor.GetMaterialSymbolOutlined("cancel"))
								</div>
							</button>
							<input type="date" @bind="t.deadline" />
						</div>
						@if (string.IsNullOrEmpty(t.interval))
						{
							<div class="aozora_left_panel_notes_body_task_entry_repeat">
								<button title="繰り返しを追加" @onclick="@(_=>t.interval="P1D")">
									@(FullEditor.GetMaterialSymbolOutlined("event_repeat"))
								</button>
							</div>
						}
						else
						{
							<div class="aozora_left_panel_notes_body_task_entry_repeat">
								<button title="繰り返しを削除" @onclick="@(_=>t.interval=string.Empty)">
									<div class="aozora_left_panel_notes_container_not_hover_icon">
										@(FullEditor.GetMaterialSymbolOutlined("event_repeat"))
									</div>
									<div class="aozora_left_panel_notes_container_hover_icon">
										@(FullEditor.GetMaterialSymbolOutlined("cancel"))
									</div>
								</button>
								@{
									if (Models.XsDuration.TryParse(t.interval, out var duration))
									{
										if (duration.IsSingleUnit)
										{
											var preselected = duration.FirstUnit;
											int first = duration.FirstValue;
											if (preselected is not Models.XsDuration.Units.Years and not Models.XsDuration.Units.Months and not Models.XsDuration.Units.Days)
											{
												preselected = Models.XsDuration.Units.Days;
												first = 1;
											}
											<input type="number" style="width:4em;" value="@first" @onchange="e=>IntervalValueChanged(e,t)" min="1" />
											<select @onchange="e=>IntervalSelectionChanged(e,t)">
												<option value="years" selected="@(preselected== Models.XsDuration.Units.Years ? "selected":null)">年</option>
												<option value="months" selected="@(preselected== Models.XsDuration.Units.Months ? "selected":null)">月</option>
												<option value="days" selected="@(preselected== Models.XsDuration.Units.Days ? "selected":null)">日</option>
											</select>
										}
										else
										{
											<input @bind="t.interval" />
										}
									}
								}
							</div>
						}
					}
					else
					{
						<div class="aozora_left_panel_notes_body_task_entry_deadline">
							<button @onclick="_=>{t.deadline=DateTime.Today;t.deadlineSpecified=true;}" title="期限を追加">
								@(FullEditor.GetMaterialSymbolOutlined("calendar_month"))
							</button>
						</div>
					}
				}
				else
				{
					if (t.deadlineSpecified)
					{
						const string iconStyle = "font-size:18px;";
						<div class="aozora_left_panel_notes_body_task_entry_deadline" @onclick="_=>SelectedTask=t">
							<span class="aozora_left_panel_notes_body_task_entry_deadline_date @((t.deadline - DateTime.Today).TotalDays switch{
								<0 => "aozora_left_panel_notes_body_task_entry_deadline_date_past",
								0 =>"aozora_left_panel_notes_body_task_entry_deadline_date_today",
								_ =>"aozora_left_panel_notes_body_task_entry_deadline_date_future",
							})">
								@(FullEditor.GetMaterialSymbolOutlined("calendar_month", iconStyle))
								@(GetDateRelative(t.deadline))
							</span>
							@if (!string.IsNullOrEmpty(t.interval))
							{
								@(FullEditor.GetMaterialSymbolOutlined("repeat", iconStyle))
							}
						</div>
					}
				}
			</div>
			@foreach (var item in t?.Items ?? Array.Empty<task>())
			{
				if (item is null) continue;
				if (item.isChecked && !root.showCompletedSub) continue;
				@GetTaskUi(item,t,root)
			}
		</li>
	</ul>
	;
	}

	void AfterChanged(task task, object? parent)
	{
		var b = task.isChecked;
		if (!b) return;
		if (string.IsNullOrEmpty(task.interval)) return;
		if (!Models.XsDuration.TryParse(task.interval, out var d)) return;
		task[]? subitems;
		if (task.Items is null or { Length: 0 })
		{
			subitems = task.Items;
		}
		else
		{
			//子Itemsを全部コピーするのは大変複雑なので雑にXML形式にシリアライズしてからデシリアライズしている。
			//パフォーマンス上よくないけど無視して良いし、元々xsd.exeで生成したものだから確実にシリアライズは出来る。
			try
			{
				System.Xml.Serialization.XmlSerializer xs = new(typeof(task[]));
				var ms = new MemoryStream();
				xs.Serialize(ms, task.Items);
				ms.Seek(0, SeekOrigin.Begin);
				subitems = (task[]?)xs.Deserialize(ms);
				UncheckSubtasks(subitems);
			}
			catch
			{
				Console.WriteLine("タスクのサブアイテムをコピーするのに失敗しました。");
				subitems = null;
			}
		}

		var cloned = new task()
			{
				header = task.header,
				detail = task.detail,
				deadline = d.GetAppended(task.deadline),
				Items = subitems,
				deadlineSpecified = true,
				interval = task.interval,
				isChecked = false,
				isCheckedSpecified = true,
				stared = task.stared,
				staredSpecified = task.staredSpecified
			};
		switch (parent)
		{
			case task pt:
				AddTaskItem(pt);
				pt.Items[^1] = cloned;
				break;
			case notesTasks pnt:
				AddTaskItem(pnt);
				pnt.Items[^1] = cloned;
				break;
		}
	}

	static void UncheckSubtasks(task[]? tasks)
	{
		if (tasks is null) return;
		foreach (var item in tasks)
		{
			if (item is null) continue;
			if (item.Items is not null) UncheckSubtasks(item.Items);
			item.isChecked = false;
			item.isCheckedSpecified = false;
		}
	}

	static void DeleteTask(object? target, task t)
	{
		switch (target)
		{
			case notesTasks nt:
				if (nt.Items is null) break;
				nt.Items = nt.Items.Where(a => a != t).ToArray();
				break;
			case task t2:
				if (t2.Items is null) break;
				t2.Items = t2.Items.Where(a => a != t).ToArray();
				break;
		}
	}

	static task[]? GetTasks(object? target) => target switch
	{
		notesTasks nt => nt.Items,
		task t2 => t2.Items,
		_ => null,
	};

	static void AddTaskItem(task target)
	{
		if (target is null) return;
		target.Items = GetExtendedTask(target.Items);
	}

	static void AddTaskItem(notesTasks target)
	{
		if (target is null) return;
		target.Items = GetExtendedTask(target.Items);

		//メモ：最後が空の場合は追加しないコード。一度にポチポチ追加してから入力するケースを想定しコメントアウト。現在は場所が違う。
		//if (target.Items.Length >= 1 && string.IsNullOrWhiteSpace(target.Items[^1].header) && string.IsNullOrWhiteSpace(target.Items[^1].detail)) return;
	}

	static task[] GetExtendedTask(task[]? items)
	{
		var ntask = new task() { header = string.Empty };
		if (items is null) { return items = new task[] { ntask }; }
		Array.Resize(ref items, items.Length + 1);
		items[^1] = ntask;
		return items;
	}

	static void ClearEmpty(notesTasks target)
	{
		if (target is null) return;
		if (target.Items is null) { target.Items = new task[0]; return; }
		foreach (var item in target.Items)
		{
			ClearEmpty(item);
		}
		target.Items = target.Items.Where(CheckNotEmpty).ToArray();

		static void ClearEmpty(task target)
		{
			if (target is null) return;
			foreach (var item in target.Items ?? Array.Empty<task>())
			{
				ClearEmpty(item);
			}
			target.Items = target.Items?.Where(CheckNotEmpty)?.ToArray();
		}

		static bool CheckNotEmpty(task a) => !string.IsNullOrWhiteSpace(a.header) || !string.IsNullOrWhiteSpace(a.detail) || a.Items is not null and { Length: > 0 };
	}

	[CascadingParameter(Name = nameof(Root))]
	public FullEditor? Root { get; private set; }

	object? selectedItemInContextMenu { get; set; }

	void IntervalSelectionChanged(ChangeEventArgs e, task t)
	{
		if (!Models.XsDuration.TryParse(t.interval, out var duration)) return;
		if (!duration.IsSingleUnit) return;
		var fv = duration.FirstValue;
		switch (e.Value)
		{
			case "years": t.interval = new Models.XsDuration(fv, 0, 0).ToString(); break;
			case "months": t.interval = new Models.XsDuration(0, fv, 0).ToString(); break;
			case "days": t.interval = new Models.XsDuration(0, 0, fv).ToString(); break;
		}
	}

	void IntervalValueChanged(ChangeEventArgs e, task t)
	{
		if (!Models.XsDuration.TryParse(t.interval, out var duration)) return;
		if (!duration.IsSingleUnit) return;
		if (!int.TryParse(e.Value?.ToString(), out int value)) return;
		switch (duration.FirstUnit)
		{
			case Models.XsDuration.Units.Years: t.interval = new Models.XsDuration(value, 0, 0).ToString(); break;
			case Models.XsDuration.Units.Months: t.interval = new Models.XsDuration(0, value, 0).ToString(); break;
			case Models.XsDuration.Units.Days: t.interval = new Models.XsDuration(0, 0, value).ToString(); break;
		}
	}

	public static string GetDateRelative(DateTime d)
	{
		var days = (d - DateTime.Today).TotalDays;

		//var culture= System.Globalization.CultureInfo.CurrentCulture;
		switch (days)
		{
			case < 0 and >= -7: return $"{-days}日前 ({d:ddd})";
			case 0: return "今日";
			case 1: return "明日";
			case 2: return "明後日";

			case < 0:
			default:
				if (d.Year == DateTime.Today.Year)
				{
					return $"{d:M}({d:ddd})";
				}
				else
				{
					return d.ToShortDateString();
				}

			case < 7: return $"{days}日後 ({d:ddd})";
		}
	}
}
