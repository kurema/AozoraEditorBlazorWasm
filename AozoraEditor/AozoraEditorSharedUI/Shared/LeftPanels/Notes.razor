@using Models.Notes;

<div class="aozora_left_panel_notes_container">
	<div class="aozora_left_panel_notes_header">
		<p class="aozora_left_panel_notes_header_title">ノート</p>
		<div class="aozora_left_panel_notes_header_icon_edit @(EditMode?"aozora_left_panel_notes_header_icon_edit_on":string.Empty)" @onclick="_=>EditMode=!EditMode">@(TabControl.GetMaterialSymbolOutlined("edit"))</div>
	</div>

	<div class="aozora_left_panel_notes_index_container_background"></div>

	<div class="aozora_left_panel_notes_index_container">
		<button class="aozora_left_panel_notes_index_item @(null == Selected? "aozora_left_panel_notes_index_item_selected":string.Empty)" @onclick="_=>Selected=null">
			@(TabControl.GetMaterialSymbolOutlined("list"))
		</button>

		@if (Root?.Notes?.Items is not null)
		{
			foreach (var item in Root.Notes.Items)
			{
				<button class="aozora_left_panel_notes_index_item @(item == Selected? "aozora_left_panel_notes_index_item_selected":string.Empty)" @onclick="_=>Selected=item"
				@oncontextmenu="async e=>{if(menuItemcontext is null)return;selectedItemInContextMenu=item; await menuItemcontext.ShowAsync(e.PageX,e.PageY);}" @oncontextmenu:preventDefault="true">
					<p class="aozora_left_panel_notes_index_item_title">@GetHeaderOfItem(item)</p>
					@if (EditMode)
					{
						<div class="aozora_left_panel_notes_index_item_close" @onclick:preventDefault @onclick:stopPropagation="true" @onclick="_=>DeleteItem(item)">@(TabControl.GetMaterialSymbolOutlined("close"))</div>
					}
				</button>
			}
		}

		<button class="aozora_left_panel_notes_index_item" @onclick="_=>AddNote()">
			<div class="aozora_left_panel_notes_index_item_icon_default">@(TabControl.GetMaterialSymbolOutlined("add"))</div>
			<div class="aozora_left_panel_notes_index_item_icon_hover">@(TabControl.GetMaterialSymbolOutlined("note"))</div>
		</button>

		<button class="aozora_left_panel_notes_index_item" @onclick="_=>AddTask()">
			<div class="aozora_left_panel_notes_index_item_icon_default">@(TabControl.GetMaterialSymbolOutlined("add"))</div>
			<div class="aozora_left_panel_notes_index_item_icon_hover">@(TabControl.GetMaterialSymbolOutlined("task"))</div>
		</button>

		<AozoraEditor.Shared.Shared.Menu.ContextMenu @ref="menuItemcontext">
			<AozoraEditor.Shared.Shared.Menu.MenuItem Title="タブ関係">
				<AozoraEditor.Shared.Shared.Menu.MenuItem Title="削除" OnHeaderSelected="_=>DeleteItem(selectedItemInContextMenu)" IconMaterialSymbols="delete" />
			</AozoraEditor.Shared.Shared.Menu.MenuItem>
		</AozoraEditor.Shared.Shared.Menu.ContextMenu>
	</div>

	<div class="aozora_left_panel_notes_body">
		@switch (Selected)
		{
			case notesTasks itemTask:
				<div class="aozora_left_panel_notes_body_tasks">
					<div class="aozora_left_panel_notes_body_tasks_header">
						<textarea @bind="itemTask.header" rows="1" class="aozora_left_panel_notes_body_general_header" placeholder="タイトル" />
						@if (EditMode)
						{
							<button @onclick="_=>DeleteItem(itemTask)">
								@(TabControl.GetMaterialSymbolOutlined("delete"))
							</button>
						}
					</div>
					<div class="aozora_left_panel_notes_body_tasks_add_header">
						<button class="aozora_left_panel_notes_body_tasks_add" @onclick="_=>AddTaskItem(itemTask)">
							<div class="aozora_left_panel_notes_body_tasks_add_icon">@(TabControl.GetMaterialSymbolOutlined("task"))</div>
							<div class="aozora_left_panel_notes_body_tasks_add_title">タスクを追加</div>
						</button>
						<div class="aozora_left_panel_notes_body_tasks_add_more">
							<AozoraEditor.Shared.Shared.Menu.MenuButton HeaderMaterial="more_vert">
								<AozoraEditor.Shared.Shared.Menu.MenuItem Title="タスクメニュー">
									<AozoraEditor.Shared.Shared.Menu.MenuItem Title="空のアイテムをクリア" OnHeaderSelected="_=>ClearEmpty(itemTask)" IconMaterialSymbols="mop" />
									<AozoraEditor.Shared.Shared.Menu.MenuItemCheckbox Title="完了したタスクを表示する" IsChecked="itemTask.showCompleted"
																					  Checked="_=>{itemTask.showCompleted=true;}" UnChecked="_=>{itemTask.showCompleted=false;}" />
									<AozoraEditor.Shared.Shared.Menu.MenuItemCheckbox Title="完了したサブタスクを表示する" IsChecked="itemTask.showCompletedSub"
																					  Checked="_=>{itemTask.showCompletedSub=true;}" UnChecked="_=>{itemTask.showCompletedSub=false;}" />
								</AozoraEditor.Shared.Shared.Menu.MenuItem>
							</AozoraEditor.Shared.Shared.Menu.MenuButton>
						</div>
					</div>
					@{
						bool noTask = true;
						foreach (var item in itemTask.Items)
						{
							if (item.isChecked && !itemTask.showCompleted) continue;
							@GetTaskUi(item,itemTask,itemTask)
							noTask = false;
						}
						if (noTask)
						{
							<p class="aozora_left_panel_notes_body_tasks_complete_main">すべてのタスクが完了しました！</p>
							<p class="aozora_left_panel_notes_body_tasks_complete_sub">おめでとうございます</p>
						}
					}
				</div>
				break;
			case notesText itemText:
				<div class="aozora_left_panel_notes_body_note">
					<textarea rows="1" class="aozora_left_panel_notes_body_general_header" @bind="itemText.header" placeholder="タイトル" />
					<textarea @bind="itemText.Value" placeholder="本文" />
					@if (EditMode)
					{
						<button @onclick="_=>DeleteItem(itemText)">
							@(TabControl.GetMaterialSymbolOutlined("delete"))
						</button>
					}
				</div>
				break;
			default:
				<div class="aozora_left_panel_notes_body_toc">
					<div class="aozora_left_panel_notes_body_toc_add">
						<div class="aozora_left_panel_notes_body_toc_add_icon_plus">
							@(TabControl.GetMaterialSymbolOutlined("add"))
						</div>
						<button class="aozora_left_panel_notes_body_toc_add_icon" @onclick="_=>AddNote()">
							@(TabControl.GetMaterialSymbolOutlined("note"))
						</button>
						<button class="aozora_left_panel_notes_body_toc_add_icon" @onclick="_=>AddTask()">
							@(TabControl.GetMaterialSymbolOutlined("task"))
						</button>
					</div>

					@if (Root?.Notes?.Items is not null)
					{
						foreach (var item in Root.Notes.Items)
						{
							<div class="aozora_left_panel_notes_body_toc_item" @onclick="_=>{Selected=item;}"
							@oncontextmenu="async e=>{if(menuItemcontext is null)return;selectedItemInContextMenu=item; await menuItemcontext.ShowAsync(e.PageX,e.PageY);}" @oncontextmenu:preventDefault="true">
								<div class="aozora_left_panel_notes_body_toc_item_icon">
									@switch (item)
									{
										case notesTasks itemTask:
											@(TabControl.GetMaterialSymbolOutlined("task"))
											break;
										case notesText itemText:
											@(TabControl.GetMaterialSymbolOutlined("note"))
											break;
									}
								</div>
								<div class="aozora_left_panel_notes_body_toc_item_header">@GetHeaderOfItem(item)</div>
								@if (EditMode)
								{
									<button @onclick="_=>MoveItem(item,-1)" class="aozora_left_panel_notes_body_toc_item_up" @onclick:preventDefault @onclick:stopPropagation="true" disabled="@(Root.Notes.Items.FirstOrDefault()==item?"disabled":null)">
										@(TabControl.GetMaterialSymbolOutlined("arrow_upward"))
									</button>
									<button @onclick="_=>MoveItem(item,+1)" class="aozora_left_panel_notes_body_toc_item_down" @onclick:preventDefault @onclick:stopPropagation="true" disabled="@(Root.Notes.Items.LastOrDefault()==item?"disabled":null)">
										@(TabControl.GetMaterialSymbolOutlined("arrow_downward"))
									</button>
									<button class="aozora_left_panel_notes_body_toc_item_delete" @onclick:preventDefault @onclick:stopPropagation="true" @onclick="_=>DeleteItem(item)">
										@(TabControl.GetMaterialSymbolOutlined("delete"))
									</button>
								}
							</div>
						}
					}
				</div>
				break;
		}
	</div>

</div>

@code {
	Menu.ContextMenu? menuItemcontext { get; set; }

	bool EditMode { get; set; } = false;

	object? Selected { get; set; }

	static string GetHeaderOfItem(object item)
	{
		return item switch
		{
			notesTasks itemTask => string.IsNullOrEmpty(itemTask.header) ? "タスク" : itemTask.header,
			notesText itemText => string.IsNullOrEmpty(itemText.header) ? "メモ" : itemText.header,
			_ => string.Empty,
		};
	}

	void AddNote() => AddContentItem(new notesText() { header = string.Empty, Value = string.Empty });

	void AddTask() => AddContentItem(new notesTasks() { header = string.Empty, Items = new[] { new task() { header = string.Empty } } });

	void MoveItem(object target, int shift)
	{
		if (Root?.Notes?.Items is null) return;

		var index = Array.IndexOf(Root.Notes.Items, target);
		if (index < 0) return;
		var shifted = index + shift;
		if (shifted < 0 || Root.Notes.Items.Length <= shifted) return;
		(Root.Notes.Items[index], Root.Notes.Items[shifted]) = (Root.Notes.Items[shifted], Root.Notes.Items[index]);
	}

	void MoveTask(object? parent, task t, int shift)
	{
		switch (parent)
		{
			case notesTasks nt:
				{
					if (nt.Items is null) break;
					var index = Array.IndexOf(nt.Items, t);
					switchItems(nt.Items, index, index + shift);
					break;
				}
			case task t2:
				{
					if (t2.Items is null) break;
					var index = Array.IndexOf(t2.Items, t);
					switchItems(t2.Items, index, index + shift);
					break;
				}
			default: return;
		}

		static void switchItems(task[]? target, int a, int b)
		{
			if (target is null) return;
			if (a < 0 || b < 0 || a >= target.Length || b >= target.Length) return;
			(target[a], target[b]) = (target[b], target[a]);
		}
	}

	void DeleteItem(object? item)
	{
		if (Root?.Notes?.Items is null) return;
		if (item is null) return;
		var items = Root.Notes.Items.ToList();
		items.Remove(item);
		Root.Notes.Items = items.ToArray();
		if (Selected == item) Selected = null;
	}

	void AddContentItem(object item)
	{
		if (Root is null) return;
		var content = Root.Notes;
		if (content?.Items is null) Root.Notes = content = new() { Items = new[] { item } };
		else
		{
			var items = content.Items;
			Array.Resize(ref items, items.Length + 1);
			items[^1] = item;
			content.Items = items;
		}
		Selected = item;
	}

	RenderFragment GetTaskUi(task t, object? parent, notesTasks root)
	{
		return
	@<ul>
		<li>
			<div class="aozora_left_panel_notes_body_task_entry">
				<input type="checkbox" @bind="t.isChecked" />
				<input @bind="t.header" class="aozora_left_panel_notes_body_task_title" />
				@if (EditMode)
				{
					var tasks = GetTasks(parent);
					<button @onclick="_=>MoveTask(parent,t,-1)" style="grid-column:3/4;" disabled="@(tasks?.FirstOrDefault() == t?"disabled":null)">
						@(TabControl.GetMaterialSymbolOutlined("arrow_upward"))
					</button>
					<button @onclick="_=>MoveTask(parent,t,+1)" style="grid-column:4/5;" disabled="@(tasks?.LastOrDefault() == t?"disabled":null)">
						@(TabControl.GetMaterialSymbolOutlined("arrow_downward"))
					</button>

					<button @onclick="_=>DeleteTask(parent,t)" style="grid-column:5/6;">
						@(TabControl.GetMaterialSymbolOutlined("delete"))
					</button>
				}
				<div class="aozora_left_panel_notes_body_task_entry_menu">
					<AozoraEditor.Shared.Shared.Menu.MenuButton HeaderMaterial="more_vert">
						<AozoraEditor.Shared.Shared.Menu.MenuItem Title="タスクメニュー">
							<AozoraEditor.Shared.Shared.Menu.MenuItem Title="サブタスクを追加" OnHeaderSelected="_=>AddTaskItem(t)" IconMaterialSymbols="subdirectory_arrow_right" />
							<AozoraEditor.Shared.Shared.Menu.MenuItem Title="削除" OnHeaderSelected="_=>DeleteTask(parent,t)" IconMaterialSymbols="delete" />
						</AozoraEditor.Shared.Shared.Menu.MenuItem>
					</AozoraEditor.Shared.Shared.Menu.MenuButton>
				</div>
			</div>
			@foreach (var item in t?.Items ?? Array.Empty<task>())
			{
				if (item is null) continue;
				if (item.isChecked && !root.showCompletedSub) continue;
				@GetTaskUi(item,t,root)
			}
		</li>
	</ul>
	;
	}

	static void DeleteTask(object? target, task t)
	{
		switch (target)
		{
			case notesTasks nt:
				if (nt.Items is null) break;
				nt.Items = nt.Items.Where(a => a != t).ToArray();
				break;
			case task t2:
				if (t2.Items is null) break;
				t2.Items = t2.Items.Where(a => a != t).ToArray();
				break;
		}
	}

	static task[]? GetTasks(object? target) => target switch
	{
		notesTasks nt => nt.Items,
		task t2 => t2.Items,
		_ => null,
	};

	static void AddTaskItem(task target)
	{
		if (target is null) return;
		target.Items = GetExtendedTask(target.Items);
	}

	static void AddTaskItem(notesTasks target)
	{
		if (target is null) return;
		target.Items = GetExtendedTask(target.Items);

		//メモ：最後が空の場合は追加しないコード。一度にポチポチ追加してから入力するケースを想定しコメントアウト。現在は場所が違う。
		//if (target.Items.Length >= 1 && string.IsNullOrWhiteSpace(target.Items[^1].header) && string.IsNullOrWhiteSpace(target.Items[^1].detail)) return;
	}

	static task[] GetExtendedTask(task[]? items)
	{
		var ntask = new task() { header = string.Empty };
		if (items is null) { return items = new task[] { ntask }; }
		Array.Resize(ref items, items.Length + 1);
		items[^1] = ntask;
		return items;
	}

	static void ClearEmpty(notesTasks target)
	{
		if (target is null) return;
		if (target.Items is null) { target.Items = new task[0]; return; }
		foreach (var item in target.Items)
		{
			ClearEmpty(item);
		}
		target.Items = target.Items.Where(CheckNotEmpty).ToArray();

		static void ClearEmpty(task target)
		{
			if (target is null) return;
			foreach (var item in target.Items ?? Array.Empty<task>())
			{
				ClearEmpty(item);
			}
			target.Items = target.Items?.Where(CheckNotEmpty)?.ToArray();
		}

		static bool CheckNotEmpty(task a) => !string.IsNullOrWhiteSpace(a.header) || !string.IsNullOrWhiteSpace(a.detail) || a.Items is not null and { Length: > 0 };
	}

	[CascadingParameter(Name = nameof(Root))]
	public TabControl? Root { get; private set; }

	object? selectedItemInContextMenu { get; set; }
}
