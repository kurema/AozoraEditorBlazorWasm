@using Markdig;
@using Markdig.Syntax;
@using Markdig.Renderers.Html;

<CascadingValue Value="this" Name="Editor">
	<SplitPage @ref="splitPage">
		<Left><StandaloneCodeEditor Id="@EditorId" ConstructionOptions="EditorConstructionOptions" @ref="Editor" /></Left>
		<Right><iframe style="width:100%;height:100%;border:none;min-height:0;min-width:0;" sandbox="allow-popups-to-escape-sandbox allow-same-origin allow-popups" srcdoc="@PreviewHtml"></iframe></Right>
	</SplitPage>
</CascadingValue>

@code {
	public enum MarkdownPageContents
	{
		Preview,
	}

	bool _SplitVertical = true;
	public bool SplitVertical
	{
		get => _SplitVertical;
		set
		{
			if (_SplitVertical == value) return;
			_SplitVertical = value;
			if (Root is not null) Root.SplitVerticalDefault = value;
			if (splitPage is null) return;
			if (splitPage.DisplayMode is SplitPage.DisplayModes.Separated or SplitPage.DisplayModes.SeparetedVertical) splitPage.DisplayMode = SeparetedValue;
		}
	}
	SplitPage.DisplayModes SeparetedValue => SplitVertical ? SplitPage.DisplayModes.Separated : SplitPage.DisplayModes.SeparetedVertical;

	MarkdownPageContents? _CurrentContent;
	public MarkdownPageContents? CurrentContent
	{
		get => _CurrentContent;
		set
		{
			_CurrentContent = value;

			if (splitPage is not null)
			{
				if (value is null) splitPage.DisplayMode = SplitPage.DisplayModes.MainFull;
				else splitPage.DisplayMode = SeparetedValue;
			}
			StateHasChanged();
		}
	}

	SplitPage? splitPage { get; set; }

	string EditorId => Id.ToString();

	public StandaloneCodeEditor? Editor;

	[Parameter]
	public string PreviewHtml { get; set; } = $@"<html><head><link href=""_content/AozoraEditorSharedUI/emoji/MaterialSymbols.css"" rel=""stylesheet"" /><link href=""_content/AozoraEditorSharedUI/css/preview-default.css"" rel=""stylesheet"" /></head><body><div class=""top_message"">プレビューの作成には<span class=""material-symbols-outlined"" style=""vertical-align:middle;"">play_arrow</span>を押してください。</div></body></html>";

	[Parameter]
	public Guid Id { get; set; }

	[Parameter]
	public string OriginalText { get; set; } = string.Empty;

	private string _FileName = "new.txt";
	public string FileName
	{
		get => _FileName;
		set { _FileName = value; TitleChanged?.Invoke(this, new()); }
	}

	public event EventHandler? TitleChanged;

	private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
	{
		return new StandaloneEditorConstructionOptions
			{
				AutomaticLayout = true,
				Language = "markdown",
				Value = OriginalText,
				Folding = true,
				WordWrap = "on",
				Suggest = new SuggestOptions()
				{
					SnippetsPreventQuickSuggestions = false,
				},
				UnicodeHighlight = new UnicodeHighlightOptions()
				{
					AmbiguousCharacters = false,
					InvisibleCharacters = false,
				}
			};
	}

	protected override void OnInitialized()
	{
		Id = Guid.NewGuid();
		base.OnInitialized();
	}

	public async Task<string?> GetText()
	{
		if (Editor is null) return null;
		return await Editor.GetValue();
	}

	public async Task ShowPreview()
	{
		if (splitPage is null) return;
		PreviewHtml = "<html><body><p>プレビュー作成中です<br />この間、UIがフリーズすることがあります。</p></body></html>";
		splitPage.DisplayMode = SeparetedValue;
		StateHasChanged();
		if (Editor is null) return;
		var text = await Editor.GetValue();
		PreviewHtml = ConvertToHtml(text) ?? "<html><body><p>プレビュー作成に失敗しました。</p></body></html>";
		StateHasChanged();
	}

	public static string? ConvertToHtml(string markdown)
	{
		var pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
		try
		{
			var doc = Markdown.Parse(markdown, pipeline);
			foreach (var link in doc.Descendants<Markdig.Syntax.Inlines.LinkInline>()) link.GetAttributes().AddPropertyIfNotExist("target", "_blank");
			foreach (var link in doc.Descendants<Markdig.Syntax.Inlines.AutolinkInline>()) link.GetAttributes().AddPropertyIfNotExist("target", "_blank");
			return doc.ToHtml(pipeline);
		}
		catch
		{
			return null;
		}
	}

	[CascadingParameter(Name = nameof(Root))]
	public FullEditor? Root { get; set; }
}
